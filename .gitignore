Dashboard

using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Windows.Forms.VisualStyles.VisualStyleElement.Button;

public class Dashboard
{

	private void Dashboard_Load(System.Object sender, System.EventArgs e)
	{
		checkButtons();
	}
	public void checkButtons()
	{
		//If the user has logged into the system, the buttons are active
		if (loggedInName.Length > 0) {
			Logbutton.Enabled = false;
			Outbutton.Enabled = true;
			if (userType == "Admin") {
				ButtonEditUsers.Enabled = true;
				//button for Edit users
			}
			ButtonEditContent.Enabled = true;
			//button for edit content
			if (userType == "Admin" | userType == "Reviewer") {
				ButtonEditComments.Enabled = true;
				//button for edit comment
			}
		} else {
			Logbutton.Enabled = true;
			//If user has not logged into the system then the buttons are inactive
			Outbutton.Enabled = false;
			ButtonEditUsers.Enabled = false;
			ButtonEditContent.Enabled = false;
			ButtonEditComments.Enabled = false;
		}
	}
	private void Logbutton_Click(System.Object sender, System.EventArgs e)
	{
		Login loginDlg = new Login();

		if (loginDlg.ShowDialog() == System.Windows.Forms.DialogResult.OK) {
			MessageBox.Show("You have Successfully Logged into the system");
			//If the user is able to login this message should appear
			checkButtons();
		} else {
			checkButtons();
			// counting the failed logins
			if (failCount > 2) {

				this.Close();
			} else {
				MessageBox.Show("Sorry Try Again");
				//This message should apper when the user is unable to login

				//I was able to look at the website www.vb-helper.com/howto_net_login_form.html, this helped me to presented a message to users

				//Users need to informed about logging to a system, if it both fails or success based on their login information.
			}
		}
	}

	private void Outbutton_Click(System.Object sender, System.EventArgs e)
	{
		if (loggedInName.Length > 0) {
			Logout.ShowDialog();
			checkButtons();
		}
	}


	private void User_Click(System.Object sender, System.EventArgs e)
	{
		//only the Admin can enter this section
		if (loggedInName.Length > 0 & userType == "Admin") {
			EditUser.ShowDialog();
		}
	}

	private void Contentbutton_Click(System.Object sender, System.EventArgs e)
	{
		EditContent contentDlg = new EditContent();
		//All content on the textbox should not appear when the user reopens the form
		if (loggedInName.Length > 0) {
			contentDlg.ShowDialog();
		}
	}

	private void Commentsbutton_Click(System.Object sender, System.EventArgs e)
	{
		EditComments commentDlg = new EditComments();
		// this is used to refesh the form whilst the user has reopened the form
		if (loggedInName.Length > 0) {
			EditComments.ShowDialog();
		}
	}


	private void ButtonOpenHomepage_Click(System.Object sender, System.EventArgs e)
	{
		System.Diagnostics.Process.Start("http://localhost:8080//");
	}
	public Dashboard()
	{
		Load += Dashboard_Load;
	}
}

Database

using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
static class Database
{
	//These methods can be used to perform common database operations...

	//Filepath and name of database - update this to contain the actual location of your database / 
	//application:

	static string DBpath = "D:\\Users\\Sukhraj Sumal\\University\\Second Year\\Business Programming\\Coursework 2- Code Review Site\\Code Review Site\\Code Review Site\\Login Database.accdb";
		//Creates a new Connection object
	static System.Data.OleDb.OleDbConnection myCon = new System.Data.OleDb.OleDbConnection();
	//The data adaptor is used to fill a DataSet and perform other database operations...
	static System.Data.OleDb.OleDbDataAdapter myDataAdapter;
	//The DataSet contains data retrieved from the database (using the data adaptor).

	//This function connects to the database. The connection is stored in global object 'myCon' and can
	//then be accessed as needed by other functions. Also includes an example of error handling using
	//Try-Catch.
	public static object OpenConnection()
	{
		try {
			//Specifies the connection string needed to connect to the database (including DB location)
			myCon.ConnectionString = "PROVIDER=Microsoft.ACE.OLEDB.12.0;Data Source =" + DBpath;

			myCon.Open();
			//connect to database
			//MsgBox("Success!", MsgBoxStyle.Information, "Connected to Database")
			return true;
			//end function

		} catch (Exception ex) {
			//Show message box if any problems occur when connecting ('ex.Message' will display info 
			//about the error)
			Interaction.MsgBox("Cannot connect to database: " + ex.Message, MsgBoxStyle.Critical, "Connection Error!");
			return false;
		}
	}

	//This subroutine retrieves all data from a database table and puts it inside a DataSet 
	//(using the DataAdaptor).
	public static void GetData(string DBtable, ref DataSet myDataSet)
	{
		//SQL statement to retrieve all data from the specified table
		string sql = "SELECT * FROM " + DBtable;

		//Create instance of data adapter object using specified SQL string and database connection.
		myDataAdapter = new System.Data.OleDb.OleDbDataAdapter(sql, myCon);

		//Create new DataSet
		myDataSet = new DataSet();

		//Use the data adaptor to fill the DataSet (so it contains all records retrieved from DB)
		myDataAdapter.Fill(myDataSet);
	}

	//This subroutine retrieves records meeting the specified criteria and puts them inside a DataSet.
	//E.g. to retrieve all records with a surname beginning with A, use this code:
	//    GetFilteredData("surname LIKE 'A%'")
	public static void GetFilteredData(string DBtable, string criteria, ref DataSet myDataSet)
	{
		//SQL statement to retrieve data meeting the specified criteria from the specified table
		string sql = "SELECT * FROM " + DBtable + " WHERE " + criteria + ";";

		//Create instance of data adapter object using specified SQL string and database connection.
		myDataAdapter = new System.Data.OleDb.OleDbDataAdapter(sql, myCon);

		//Create new DataSet
		myDataSet = new DataSet();

		//Use the data adaptor to fill the DataSet (so it contains all records retrieved from DB)
		myDataAdapter.Fill(myDataSet);
	}

	//This function returns the number of records in the DataSet.
	public static object CountRecords(ref DataSet myDataSet)
	{
		return myDataSet.Tables[0].Rows.Count();
	}

	//This function returns the value of a field in a specific record in the DataSet. Use after running
	//the GetData() or GetFilteredData() subroutine above.
	//
	//E.g. To fill a textbox (called 'TextBox1') with the surname of the second user in your database, 
	//use this code: 
	//    TextBox1.Text = GetDBvalue(2,3)
	//This sets recordNum to 2 (to retrieve the details of the 2nd user), and fieldNum to 3 (to retrieve 
	//the value of the 3rd field in the DB table - the 'surname' field in this case).
	public static object GetDsValue(int recordNum, int fieldNum, ref DataSet myDataSet)
	{
		return myDataSet.Tables[0].Rows[recordNum - 1][fieldNum - 1];
		//[Note: for simplicity, this function accepts 1-based numbers and converts them into 0-based]
	}

	//This subroutine adds data to a new record in the database. To run, you need to specify the names 
	//of the fields to insert (separated by commas), followed by the values of these fields 
	//(separated by commas) - e.g.
	//    AddData( "firstname, surname" , "'Ken', 'Boness'" )
	//[Note: if the field values are strings, remember to surround them with quotes (as shown) - ' ]
	public static void AddData(string DBtable, string fieldNames, string fieldVals)
	{
		//Assemble SQL query to add data to the database based on the values passed to this function.
		string sql = "INSERT INTO " + DBtable + " (" + fieldNames + ") VALUES (" + fieldVals + ")";

		//Create an instance of data adapter (if not created already)
		myDataAdapter = new System.Data.OleDb.OleDbDataAdapter();

		//Add command to insert data (using data adaptor) based on SQL query above.
		myDataAdapter.InsertCommand = new System.Data.OleDb.OleDbCommand(sql, myCon);
		//Execute command to insert data into a new database record
		myDataAdapter.InsertCommand.ExecuteNonQuery();
	}

	//This subroutine updates the specified record(s) with new values. To run, you need to specify the 
	//new value(s)of the relevant field(s), as well as which record(s) to update - e.g.
	//    UpdateData( "surname = 'Boness'" , "id = 1" )
	//This will change the surname of record 1 to 'Boness' (note the arrangement of quotes)
	public static void UpdateData(string DBtable, string dataToUpdate, string updateCriteria)
	{
		//Assemble SQL query to update the specified record(s) with the specified value(s)
		string sql = "UPDATE " + DBtable + " SET " + dataToUpdate + " WHERE " + updateCriteria;

		//Create an instance of data adapter (if not created already)
		myDataAdapter = new System.Data.OleDb.OleDbDataAdapter();

		//Add command to update data (using data adaptor) based on SQL query above.
		myDataAdapter.UpdateCommand = new System.Data.OleDb.OleDbCommand(sql, myCon);
		//Execute command to update data in the relevant database record(s)
		myDataAdapter.UpdateCommand.ExecuteNonQuery();
	}

	//Closes the database connection - it is a good idea to do this when no longer required...
	public static void CloseCon()
	{
		myCon.Close();
	}

}


Edit Comment 

using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.IO;
public class EditComments
{


	private void EditComments_Load(System.Object sender, System.EventArgs e)
	{
	}


	private void ADD_Click(System.Object sender, System.EventArgs e)
	{
		dynamic filename = "N:\\Business Programming\\Code Review WebRoot\\" + ebox.Text + "\\comments.txt";
		string comment = "";
		// read existing comments file if it exists
		if (!string.IsNullOrEmpty(FileSystem.Dir(filename))) {
			StreamReader myStream = new StreamReader(filename);
			comment = myStream.ReadToEnd();
			myStream.Close();
		}

		comment += ComBox.Text + Constants.vbCrLf;

		StreamWriter myWriteStream = new StreamWriter(filename);
		// write out comments again
		myWriteStream.Write(comment);
		myWriteStream.Close();
		Interaction.MsgBox("Comment added");
	}
	public EditComments()
	{
		Load += EditComments_Load;
	}
}


Edit Content

using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.IO;
public class EditContent
{

	private object DictionaryEntry { get; set; }

	private void ButtonOpen_Click(System.Object sender, System.EventArgs e)
	{
		//I was able to reference this code from http://www.techrepublic.com/blog/programming-and-development/let-users-pick-a-file-to-open-via-openfiledialog-in-vbnet/481
		if (userType != "Admin") {
			OpenFileDialog1.InitialDirectory = "N:\\Business Programming\\Code Review WebRoot\\Code Review WebRoot\\" + loggedInName;
			if (string.IsNullOrEmpty(FileSystem.Dir(OpenFileDialog1.InitialDirectory, FileAttribute.Directory)))
				FileSystem.MkDir(OpenFileDialog1.InitialDirectory);
			// if the directory does not exists then make it
		} else {
			OpenFileDialog1.InitialDirectory = "N:\\Business Programming\\Code Review WebRoot\\\\Code Review WebRoot";
		}

		OpenFileDialog1.Filter = "HTML files|*.html|Text Files|*.txt|All Files|*.*";
		OpenFileDialog1.Title = "Open File";
		if (OpenFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.OK) {
			// insert code to open file from
			SaveFileDialog1.FileName = OpenFileDialog1.FileName;
			StreamReader myStream = new StreamReader(OpenFileDialog1.FileName);
			//read into text box for example
			TextBoxContent.Text = myStream.ReadToEnd();
			myStream.Close();
		}
	}

	private void ButtonSave_Click(System.Object sender, System.EventArgs e)
	{
		//I was able to reference my work from http://msdn.microsoft.com/en-us/library/sfezx97z.aspx
		if (userType != "Admin") {
			SaveFileDialog1.InitialDirectory = "N:\\Business Programming\\Code Review WebRoot\\Code Review WebRoot\\" + loggedInName;
			if (string.IsNullOrEmpty(FileSystem.Dir(SaveFileDialog1.InitialDirectory, FileAttribute.Directory)))
				FileSystem.MkDir(SaveFileDialog1.InitialDirectory);
		// if the directory does not exists then make it
		} else {
			SaveFileDialog1.InitialDirectory = "D:\\Sukhraj Sumal\\University\\Second Year\\Business Programming\\Code Review WebRoot";
		}
		SaveFileDialog1.Filter = "HTML files|*.html|Text Files|*.txt|All Files|*.*";
		//The file type that I have used are both Text and HTML files to uploaded onto the Code Review Site
		SaveFileDialog1.Title = "Save File";
		if (SaveFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.OK) {
			StreamWriter myStream = new StreamWriter(SaveFileDialog1.FileName);
			//read into text box for example
			myStream.Write(TextBoxContent.Text);
			myStream.Close();
			// insert code to save file 
			//SaveFileDialog1.FileName
			//read into text box for example
		}

	}
}


Edit User

using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
public class EditUser
{

	private void Login_DetailsBindingNavigatorSaveItem_Click(System.Object sender, System.EventArgs e)
	{
		this.Validate();
		this.Login_DetailsBindingSource.EndEdit();
		this.TableAdapterManager.UpdateAll(this.Login_DatabaseDataSet);

	}

	private void EditUser_Load(System.Object sender, System.EventArgs e)
	{
		//TODO: This line of code loads data into the 'Login_DatabaseDataSet.Login_Details' table. You can move, or remove it, as needed.
		this.Login_DetailsTableAdapter.Fill(this.Login_DatabaseDataSet.Login_Details);
	}
	public EditUser()
	{
		Load += EditUser_Load;
	}
}


Global Variables

using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
static class globals
{
		// current logged in user
	public static string loggedInName = "";
		// times failed
	public static int failCount = 0;
		// type of user
	public static string userType;
}


Login 

using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Data.SqlClient;
using System.Net.Mail;

public class Login
{

	private void Button1_Click(System.Object sender, System.EventArgs e)
	{
		DataSet loginDataSet = new DataSet();

		OpenConnection();
		GetFilteredData("[Login Details]", "username=\"" + TextBoxName.Text + "\"", loginDataSet);
		//this would 0 based on the fact, the username would not exist in the database
		if (CountRecords(loginDataSet) < 1) {
			loggedInName = "";
			failCount += 1;
			this.DialogResult = System.Windows.Forms.DialogResult.Abort;
		//getting data from the third column for password and also invalid logins are used in this statement
		} else if (GetDsValue(1, 3, loginDataSet) == MaskedTextBoxPassword.Text & GetDsValue(1, 4, loginDataSet) < 3) {
			//MsgBox("'Values from the record matches the said records needed in the form")
			loggedInName = TextBoxName.Text;
			userType = GetDsValue(1, 5, loginDataSet);
			UpdateData("[Login Details]", "[Login Details].BadLogin = 0", "[Login Details].Username =\"" + TextBoxName.Text + "\"");
			this.DialogResult = System.Windows.Forms.DialogResult.OK;
		} else {
			loggedInName = "";
			if (GetDsValue(1, 5, loginDataSet) != "Admin") {
				failCount = GetDsValue(1, 4, loginDataSet);
				failCount += 1;
				UpdateData("[Login Details]", "[Login Details].BadLogin = " + failCount.ToString, "[Login Details].Username =\"" + TextBoxName.Text + "\"");
			} else {
				DataSet adminDataSet = new DataSet();

				GetFilteredData("[Login Details]", "(BadLogin < 3 AND UserType=\"Admin\")", adminDataSet);
				// get details for admins who are not locked out
				//U26 If more than 1 then we can increment the failcount 
				if (CountRecords(adminDataSet) > 1) {
					failCount = GetDsValue(1, 4, loginDataSet);
					failCount += 1;
					UpdateData("[Login Details]", "[Login Details].BadLogin = " + failCount.ToString, "[Login Details].Username =\"" + TextBoxName.Text + "\"");
				} else {
					failCount += 1;
				}
			}
			this.DialogResult = System.Windows.Forms.DialogResult.Abort;
		}
		CloseCon();
		this.Close();

	}

	private void ButtonRequest_Click(System.Object sender, System.EventArgs e)
	{
		//I was able to look at the video about adding comments to an email address from www.youtube.com/watch?v=MlFm_Jb3Fhg
		//The video helped me create a form, which allows the user to add comments, which would be sent as an email.
		//This can also be related to a blacklist or resetting an account within the system, it easier to use a Google Email Address
		MailMessage MyMailMessage = new MailMessage();

		try {
			MyMailMessage.From = new MailAddress("captsumal@gmail.com");
			//User Email address (CaptSumal is a default within code)
			MyMailMessage.To.Add("captsumal@gmail.com");
			//The message from User Email Address goes here.
			MyMailMessage.Subject = "Reset request for " + TextBoxName.Text;
			//where user inserts email address
			MyMailMessage.Body = "Please could you reset logins for " + TextBoxName.Text;
			//where user insert their information
			SmtpClient SMTP = new SmtpClient("smtp.gmail.com");
			SMTP.Port = 587;
			SMTP.EnableSsl = true;
			SMTP.Credentials = new System.Net.NetworkCredential("captsumal@gmail.com", "batman99");
			//User email account details
			SMTP.Send(MyMailMessage);

			MessageBox.Show("Reset request has now been sent");
			this.Close();


		} catch (Exception ex) {
		}

	}


	private void TextBoxName_TextChanged(System.Object sender, System.EventArgs e)
	{
	}
}


Logout

using Microsoft.VisualBasic;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
public class Logout
{


	private void Logout_Load(System.Object sender, System.EventArgs e)
	{
	}

	private void No_Click(System.Object sender, System.EventArgs e)
	{
		this.Close();
	}

	private void Yes_Click(System.Object sender, System.EventArgs e)
	{
		loggedInName = "";
		this.DialogResult = System.Windows.Forms.DialogResult.Yes;
		this.Close();

		//To help me close the log out stages of the code used above, I looked at the website
		//www.dreamincode.net/forums/topic/46436-close-whole-application/

		//this website helped me to close both logout and dashboard forms within the code review site.
	}
	public Logout()
	{
		Load += Logout_Load;
	}
}

Dashboard Designer Code

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
[Microsoft.VisualBasic.CompilerServices.DesignerGenerated()]
partial class Dashboard : System.Windows.Forms.Form
{

	//Form overrides dispose to clean up the component list.
	[System.Diagnostics.DebuggerNonUserCode()]
	protected override void Dispose(bool disposing)
	{
		try {
			if (disposing && components != null) {
				components.Dispose();
			}
		} finally {
			base.Dispose(disposing);
		}
	}

	//Required by the Windows Form Designer

	private System.ComponentModel.IContainer components;
	//NOTE: The following procedure is required by the Windows Form Designer
	//It can be modified using the Windows Form Designer.  
	//Do not modify it using the code editor.
	[System.Diagnostics.DebuggerStepThrough()]
	private void InitializeComponent()
	{
		this.Logbutton = new System.Windows.Forms.Button();
		this.Outbutton = new System.Windows.Forms.Button();
		this.ButtonEditUsers = new System.Windows.Forms.Button();
		this.ButtonEditContent = new System.Windows.Forms.Button();
		this.ButtonEditComments = new System.Windows.Forms.Button();
		this.ButtonOpenHomepage = new System.Windows.Forms.Button();
		this.SuspendLayout();
		//
		//Logbutton
		//
		this.Logbutton.Location = new System.Drawing.Point(67, 47);
		this.Logbutton.Name = "Logbutton";
		this.Logbutton.Size = new System.Drawing.Size(157, 23);
		this.Logbutton.TabIndex = 0;
		this.Logbutton.Text = "Log In ";
		this.Logbutton.UseVisualStyleBackColor = true;
		//
		//Outbutton
		//
		this.Outbutton.Location = new System.Drawing.Point(67, 87);
		this.Outbutton.Name = "Outbutton";
		this.Outbutton.Size = new System.Drawing.Size(157, 23);
		this.Outbutton.TabIndex = 1;
		this.Outbutton.Text = "Log Out ";
		this.Outbutton.UseVisualStyleBackColor = true;
		//
		//ButtonEditUsers
		//
		this.ButtonEditUsers.Location = new System.Drawing.Point(67, 129);
		this.ButtonEditUsers.Name = "ButtonEditUsers";
		this.ButtonEditUsers.Size = new System.Drawing.Size(157, 25);
		this.ButtonEditUsers.TabIndex = 2;
		this.ButtonEditUsers.Text = "Edit Users";
		this.ButtonEditUsers.UseVisualStyleBackColor = true;
		//
		//ButtonEditContent
		//
		this.ButtonEditContent.Location = new System.Drawing.Point(67, 173);
		this.ButtonEditContent.Name = "ButtonEditContent";
		this.ButtonEditContent.Size = new System.Drawing.Size(157, 25);
		this.ButtonEditContent.TabIndex = 3;
		this.ButtonEditContent.Text = "Edit Content";
		this.ButtonEditContent.UseVisualStyleBackColor = true;
		//
		//ButtonEditComments
		//
		this.ButtonEditComments.Location = new System.Drawing.Point(67, 219);
		this.ButtonEditComments.Name = "ButtonEditComments";
		this.ButtonEditComments.Size = new System.Drawing.Size(157, 26);
		this.ButtonEditComments.TabIndex = 4;
		this.ButtonEditComments.Text = "Edit Comments";
		this.ButtonEditComments.UseVisualStyleBackColor = true;
		//
		//ButtonOpenHomepage
		//
		this.ButtonOpenHomepage.Location = new System.Drawing.Point(67, 9);
		this.ButtonOpenHomepage.Name = "ButtonOpenHomepage";
		this.ButtonOpenHomepage.Size = new System.Drawing.Size(157, 23);
		this.ButtonOpenHomepage.TabIndex = 5;
		this.ButtonOpenHomepage.Text = "Open Homepage";
		this.ButtonOpenHomepage.UseVisualStyleBackColor = true;
		//
		//Dashboard
		//
		this.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
		this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
		this.ClientSize = new System.Drawing.Size(284, 262);
		this.Controls.Add(this.ButtonOpenHomepage);
		this.Controls.Add(this.ButtonEditComments);
		this.Controls.Add(this.ButtonEditContent);
		this.Controls.Add(this.ButtonEditUsers);
		this.Controls.Add(this.Outbutton);
		this.Controls.Add(this.Logbutton);
		this.Name = "Dashboard";
		this.Text = "Dashboard";
		this.ResumeLayout(false);

	}
	internal System.Windows.Forms.Button Logbutton;
	internal System.Windows.Forms.Button Outbutton;
	internal System.Windows.Forms.Button ButtonEditUsers;
	internal System.Windows.Forms.Button ButtonEditContent;
	internal System.Windows.Forms.Button ButtonEditComments;

	internal System.Windows.Forms.Button ButtonOpenHomepage;
	public Dashboard()
	{
		InitializeComponent();
	}
}


Edit Comments Designer Code

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
[Microsoft.VisualBasic.CompilerServices.DesignerGenerated()]
partial class EditComments : System.Windows.Forms.Form
{

	//Form overrides dispose to clean up the component list.
	[System.Diagnostics.DebuggerNonUserCode()]
	protected override void Dispose(bool disposing)
	{
		try {
			if (disposing && components != null) {
				components.Dispose();
			}
		} finally {
			base.Dispose(disposing);
		}
	}

	//Required by the Windows Form Designer

	private System.ComponentModel.IContainer components;
	//NOTE: The following procedure is required by the Windows Form Designer
	//It can be modified using the Windows Form Designer.  
	//Do not modify it using the code editor.
	[System.Diagnostics.DebuggerStepThrough()]
	private void InitializeComponent()
	{
		this.ButtonUpdate = new System.Windows.Forms.Button();
		this.Email1 = new System.Windows.Forms.Label();
		this.Com1 = new System.Windows.Forms.Label();
		this.ebox = new System.Windows.Forms.TextBox();
		this.ComBox = new System.Windows.Forms.TextBox();
		this.ADD = new System.Windows.Forms.Button();
		this.SuspendLayout();
		//
		//ButtonUpdate
		//
		this.ButtonUpdate.Location = new System.Drawing.Point(12, 218);
		this.ButtonUpdate.Name = "ButtonUpdate";
		this.ButtonUpdate.Size = new System.Drawing.Size(75, 23);
		this.ButtonUpdate.TabIndex = 0;
		this.ButtonUpdate.Text = "Update";
		this.ButtonUpdate.UseVisualStyleBackColor = true;
		//
		//Email1
		//
		this.Email1.AutoSize = true;
		this.Email1.Location = new System.Drawing.Point(12, 34);
		this.Email1.Name = "Email1";
		this.Email1.Size = new System.Drawing.Size(118, 13);
		this.Email1.TabIndex = 0;
		this.Email1.Text = "Please Enter Username";
		//
		//Com1
		//
		this.Com1.AutoSize = true;
		this.Com1.Location = new System.Drawing.Point(12, 91);
		this.Com1.Name = "Com1";
		this.Com1.Size = new System.Drawing.Size(110, 13);
		this.Com1.TabIndex = 1;
		this.Com1.Text = "Enter Comments Here";
		//
		//ebox
		//
		this.ebox.Location = new System.Drawing.Point(165, 34);
		this.ebox.Multiline = true;
		this.ebox.Name = "ebox";
		this.ebox.Size = new System.Drawing.Size(170, 20);
		this.ebox.TabIndex = 2;
		//
		//ComBox
		//
		this.ComBox.Location = new System.Drawing.Point(165, 76);
		this.ComBox.Multiline = true;
		this.ComBox.Name = "ComBox";
		this.ComBox.Size = new System.Drawing.Size(170, 122);
		this.ComBox.TabIndex = 3;
		//
		//ADD
		//
		this.ADD.Location = new System.Drawing.Point(221, 219);
		this.ADD.Name = "ADD";
		this.ADD.Size = new System.Drawing.Size(114, 41);
		this.ADD.TabIndex = 4;
		this.ADD.Text = "Add Comment";
		this.ADD.UseVisualStyleBackColor = true;
		//
		//EditComments
		//
		this.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
		this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
		this.ClientSize = new System.Drawing.Size(351, 295);
		this.Controls.Add(this.ADD);
		this.Controls.Add(this.ComBox);
		this.Controls.Add(this.ebox);
		this.Controls.Add(this.Com1);
		this.Controls.Add(this.Email1);
		this.Name = "EditComments";
		this.Text = "EditComments";
		this.ResumeLayout(false);
		this.PerformLayout();

	}
	internal System.Windows.Forms.Button ButtonUpdate;
	internal System.Windows.Forms.Label Email1;
	internal System.Windows.Forms.Label Com1;
	internal System.Windows.Forms.TextBox ebox;
	internal System.Windows.Forms.TextBox ComBox;
	internal System.Windows.Forms.Button ADD;
	public EditComments()
	{
		InitializeComponent();
	}
}


Edit Content Designer Code

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
[Microsoft.VisualBasic.CompilerServices.DesignerGenerated()]
partial class EditContent : System.Windows.Forms.Form
{

	//Form overrides dispose to clean up the component list.
	[System.Diagnostics.DebuggerNonUserCode()]
	protected override void Dispose(bool disposing)
	{
		try {
			if (disposing && components != null) {
				components.Dispose();
			}
		} finally {
			base.Dispose(disposing);
		}
	}

	//Required by the Windows Form Designer

	private System.ComponentModel.IContainer components;
	//NOTE: The following procedure is required by the Windows Form Designer
	//It can be modified using the Windows Form Designer.  
	//Do not modify it using the code editor.
	[System.Diagnostics.DebuggerStepThrough()]
	private void InitializeComponent()
	{
		this.ButtonOpen = new System.Windows.Forms.Button();
		this.OpenFileDialog1 = new System.Windows.Forms.OpenFileDialog();
		this.ButtonSave = new System.Windows.Forms.Button();
		this.SaveFileDialog1 = new System.Windows.Forms.SaveFileDialog();
		this.TextBoxContent = new System.Windows.Forms.TextBox();
		this.ButtonCancel = new System.Windows.Forms.Button();
		this.SuspendLayout();
		//
		//ButtonOpen
		//
		this.ButtonOpen.Location = new System.Drawing.Point(104, 208);
		this.ButtonOpen.Name = "ButtonOpen";
		this.ButtonOpen.Size = new System.Drawing.Size(75, 23);
		this.ButtonOpen.TabIndex = 1;
		this.ButtonOpen.Text = "Open";
		this.ButtonOpen.UseVisualStyleBackColor = true;
		//
		//ButtonSave
		//
		this.ButtonSave.Location = new System.Drawing.Point(197, 208);
		this.ButtonSave.Name = "ButtonSave";
		this.ButtonSave.Size = new System.Drawing.Size(75, 23);
		this.ButtonSave.TabIndex = 2;
		this.ButtonSave.Text = "Save";
		this.ButtonSave.UseVisualStyleBackColor = true;
		//
		//TextBoxContent
		//
		this.TextBoxContent.Location = new System.Drawing.Point(29, 13);
		this.TextBoxContent.Multiline = true;
		this.TextBoxContent.Name = "TextBoxContent";
		this.TextBoxContent.Size = new System.Drawing.Size(243, 165);
		this.TextBoxContent.TabIndex = 3;
		this.TextBoxContent.Text = "<html>" + Strings.ChrW(13) + Strings.ChrW(10) + "<head>" + Strings.ChrW(13) + Strings.ChrW(10) + "<title></title>" + Strings.ChrW(13) + Strings.ChrW(10) + "</head>" + Strings.ChrW(13) + Strings.ChrW(10) + "<body></body>" + Strings.ChrW(13) + Strings.ChrW(10) + "</html>";
		//
		//ButtonCancel
		//
		this.ButtonCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
		this.ButtonCancel.Location = new System.Drawing.Point(13, 207);
		this.ButtonCancel.Name = "ButtonCancel";
		this.ButtonCancel.Size = new System.Drawing.Size(75, 23);
		this.ButtonCancel.TabIndex = 4;
		this.ButtonCancel.Text = "Cancel";
		this.ButtonCancel.UseVisualStyleBackColor = true;
		//
		//EditContent
		//
		this.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
		this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
		this.ClientSize = new System.Drawing.Size(284, 262);
		this.Controls.Add(this.ButtonCancel);
		this.Controls.Add(this.TextBoxContent);
		this.Controls.Add(this.ButtonSave);
		this.Controls.Add(this.ButtonOpen);
		this.Name = "EditContent";
		this.Text = "EditContent";
		this.ResumeLayout(false);
		this.PerformLayout();

	}
	internal System.Windows.Forms.Button ButtonOpen;
	internal System.Windows.Forms.OpenFileDialog OpenFileDialog1;
	internal System.Windows.Forms.Button ButtonSave;
	internal System.Windows.Forms.SaveFileDialog SaveFileDialog1;
	internal System.Windows.Forms.TextBox TextBoxContent;
	internal System.Windows.Forms.Button ButtonCancel;
	public EditContent()
	{
		InitializeComponent();
	}
}


Edit User Designer Code

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
[Microsoft.VisualBasic.CompilerServices.DesignerGenerated()]
partial class EditUser : System.Windows.Forms.Form
{

	//Form overrides dispose to clean up the component list.
	[System.Diagnostics.DebuggerNonUserCode()]
	protected override void Dispose(bool disposing)
	{
		try {
			if (disposing && components != null) {
				components.Dispose();
			}
		} finally {
			base.Dispose(disposing);
		}
	}

	//Required by the Windows Form Designer

	private System.ComponentModel.IContainer components;
	//NOTE: The following procedure is required by the Windows Form Designer
	//It can be modified using the Windows Form Designer.  
	//Do not modify it using the code editor.
	[System.Diagnostics.DebuggerStepThrough()]
	private void InitializeComponent()
	{
		this.components = new System.ComponentModel.Container();
		System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EditUser));
		this.Login_DatabaseDataSet = new Code_Review_Site.Login_DatabaseDataSet();
		this.Login_DetailsBindingSource = new System.Windows.Forms.BindingSource(this.components);
		this.Login_DetailsTableAdapter = new Code_Review_Site.Login_DatabaseDataSetTableAdapters.Login_DetailsTableAdapter();
		this.TableAdapterManager = new Code_Review_Site.Login_DatabaseDataSetTableAdapters.TableAdapterManager();
		this.Login_DetailsBindingNavigator = new System.Windows.Forms.BindingNavigator(this.components);
		this.BindingNavigatorMoveFirstItem = new System.Windows.Forms.ToolStripButton();
		this.BindingNavigatorMovePreviousItem = new System.Windows.Forms.ToolStripButton();
		this.BindingNavigatorSeparator = new System.Windows.Forms.ToolStripSeparator();
		this.BindingNavigatorPositionItem = new System.Windows.Forms.ToolStripTextBox();
		this.BindingNavigatorCountItem = new System.Windows.Forms.ToolStripLabel();
		this.BindingNavigatorSeparator1 = new System.Windows.Forms.ToolStripSeparator();
		this.BindingNavigatorMoveNextItem = new System.Windows.Forms.ToolStripButton();
		this.BindingNavigatorMoveLastItem = new System.Windows.Forms.ToolStripButton();
		this.BindingNavigatorSeparator2 = new System.Windows.Forms.ToolStripSeparator();
		this.BindingNavigatorAddNewItem = new System.Windows.Forms.ToolStripButton();
		this.BindingNavigatorDeleteItem = new System.Windows.Forms.ToolStripButton();
		this.Login_DetailsBindingNavigatorSaveItem = new System.Windows.Forms.ToolStripButton();
		this.Login_DetailsDataGridView = new System.Windows.Forms.DataGridView();
		this.DataGridViewTextBoxColumn1 = new System.Windows.Forms.DataGridViewTextBoxColumn();
		this.DataGridViewTextBoxColumn2 = new System.Windows.Forms.DataGridViewTextBoxColumn();
		this.DataGridViewTextBoxColumn3 = new System.Windows.Forms.DataGridViewTextBoxColumn();
		this.DataGridViewTextBoxColumn4 = new System.Windows.Forms.DataGridViewTextBoxColumn();
		this.DataGridViewTextBoxColumn5 = new System.Windows.Forms.DataGridViewTextBoxColumn();
		((System.ComponentModel.ISupportInitialize)this.Login_DatabaseDataSet).BeginInit();
		((System.ComponentModel.ISupportInitialize)this.Login_DetailsBindingSource).BeginInit();
		((System.ComponentModel.ISupportInitialize)this.Login_DetailsBindingNavigator).BeginInit();
		this.Login_DetailsBindingNavigator.SuspendLayout();
		((System.ComponentModel.ISupportInitialize)this.Login_DetailsDataGridView).BeginInit();
		this.SuspendLayout();
		//
		//Login_DatabaseDataSet
		//
		this.Login_DatabaseDataSet.DataSetName = "Login_DatabaseDataSet";
		this.Login_DatabaseDataSet.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
		//
		//Login_DetailsBindingSource
		//
		this.Login_DetailsBindingSource.DataMember = "Login Details";
		this.Login_DetailsBindingSource.DataSource = this.Login_DatabaseDataSet;
		//
		//Login_DetailsTableAdapter
		//
		this.Login_DetailsTableAdapter.ClearBeforeFill = true;
		//
		//TableAdapterManager
		//
		this.TableAdapterManager.BackupDataSetBeforeUpdate = false;
		this.TableAdapterManager.Login_DetailsTableAdapter = this.Login_DetailsTableAdapter;
		this.TableAdapterManager.Table_for_VBATableAdapter = null;
		this.TableAdapterManager.UpdateOrder = Code_Review_Site.Login_DatabaseDataSetTableAdapters.TableAdapterManager.UpdateOrderOption.InsertUpdateDelete;
		//
		//Login_DetailsBindingNavigator
		//
		this.Login_DetailsBindingNavigator.AddNewItem = this.BindingNavigatorAddNewItem;
		this.Login_DetailsBindingNavigator.BindingSource = this.Login_DetailsBindingSource;
		this.Login_DetailsBindingNavigator.CountItem = this.BindingNavigatorCountItem;
		this.Login_DetailsBindingNavigator.DeleteItem = this.BindingNavigatorDeleteItem;
		this.Login_DetailsBindingNavigator.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
			this.BindingNavigatorMoveFirstItem,
			this.BindingNavigatorMovePreviousItem,
			this.BindingNavigatorSeparator,
			this.BindingNavigatorPositionItem,
			this.BindingNavigatorCountItem,
			this.BindingNavigatorSeparator1,
			this.BindingNavigatorMoveNextItem,
			this.BindingNavigatorMoveLastItem,
			this.BindingNavigatorSeparator2,
			this.BindingNavigatorAddNewItem,
			this.BindingNavigatorDeleteItem,
			this.Login_DetailsBindingNavigatorSaveItem
		});
		this.Login_DetailsBindingNavigator.Location = new System.Drawing.Point(0, 0);
		this.Login_DetailsBindingNavigator.MoveFirstItem = this.BindingNavigatorMoveFirstItem;
		this.Login_DetailsBindingNavigator.MoveLastItem = this.BindingNavigatorMoveLastItem;
		this.Login_DetailsBindingNavigator.MoveNextItem = this.BindingNavigatorMoveNextItem;
		this.Login_DetailsBindingNavigator.MovePreviousItem = this.BindingNavigatorMovePreviousItem;
		this.Login_DetailsBindingNavigator.Name = "Login_DetailsBindingNavigator";
		this.Login_DetailsBindingNavigator.PositionItem = this.BindingNavigatorPositionItem;
		this.Login_DetailsBindingNavigator.Size = new System.Drawing.Size(554, 25);
		this.Login_DetailsBindingNavigator.TabIndex = 0;
		this.Login_DetailsBindingNavigator.Text = "BindingNavigator1";
		//
		//BindingNavigatorMoveFirstItem
		//
		this.BindingNavigatorMoveFirstItem.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
		this.BindingNavigatorMoveFirstItem.Image = (System.Drawing.Image)resources.GetObject("BindingNavigatorMoveFirstItem.Image");
		this.BindingNavigatorMoveFirstItem.Name = "BindingNavigatorMoveFirstItem";
		this.BindingNavigatorMoveFirstItem.RightToLeftAutoMirrorImage = true;
		this.BindingNavigatorMoveFirstItem.Size = new System.Drawing.Size(23, 22);
		this.BindingNavigatorMoveFirstItem.Text = "Move first";
		//
		//BindingNavigatorMovePreviousItem
		//
		this.BindingNavigatorMovePreviousItem.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
		this.BindingNavigatorMovePreviousItem.Image = (System.Drawing.Image)resources.GetObject("BindingNavigatorMovePreviousItem.Image");
		this.BindingNavigatorMovePreviousItem.Name = "BindingNavigatorMovePreviousItem";
		this.BindingNavigatorMovePreviousItem.RightToLeftAutoMirrorImage = true;
		this.BindingNavigatorMovePreviousItem.Size = new System.Drawing.Size(23, 22);
		this.BindingNavigatorMovePreviousItem.Text = "Move previous";
		//
		//BindingNavigatorSeparator
		//
		this.BindingNavigatorSeparator.Name = "BindingNavigatorSeparator";
		this.BindingNavigatorSeparator.Size = new System.Drawing.Size(6, 25);
		//
		//BindingNavigatorPositionItem
		//
		this.BindingNavigatorPositionItem.AccessibleName = "Position";
		this.BindingNavigatorPositionItem.AutoSize = false;
		this.BindingNavigatorPositionItem.Name = "BindingNavigatorPositionItem";
		this.BindingNavigatorPositionItem.Size = new System.Drawing.Size(50, 23);
		this.BindingNavigatorPositionItem.Text = "0";
		this.BindingNavigatorPositionItem.ToolTipText = "Current position";
		//
		//BindingNavigatorCountItem
		//
		this.BindingNavigatorCountItem.Name = "BindingNavigatorCountItem";
		this.BindingNavigatorCountItem.Size = new System.Drawing.Size(35, 15);
		this.BindingNavigatorCountItem.Text = "of {0}";
		this.BindingNavigatorCountItem.ToolTipText = "Total number of items";
		//
		//BindingNavigatorSeparator1
		//
		this.BindingNavigatorSeparator1.Name = "BindingNavigatorSeparator";
		this.BindingNavigatorSeparator1.Size = new System.Drawing.Size(6, 6);
		//
		//BindingNavigatorMoveNextItem
		//
		this.BindingNavigatorMoveNextItem.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
		this.BindingNavigatorMoveNextItem.Image = (System.Drawing.Image)resources.GetObject("BindingNavigatorMoveNextItem.Image");
		this.BindingNavigatorMoveNextItem.Name = "BindingNavigatorMoveNextItem";
		this.BindingNavigatorMoveNextItem.RightToLeftAutoMirrorImage = true;
		this.BindingNavigatorMoveNextItem.Size = new System.Drawing.Size(23, 20);
		this.BindingNavigatorMoveNextItem.Text = "Move next";
		//
		//BindingNavigatorMoveLastItem
		//
		this.BindingNavigatorMoveLastItem.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
		this.BindingNavigatorMoveLastItem.Image = (System.Drawing.Image)resources.GetObject("BindingNavigatorMoveLastItem.Image");
		this.BindingNavigatorMoveLastItem.Name = "BindingNavigatorMoveLastItem";
		this.BindingNavigatorMoveLastItem.RightToLeftAutoMirrorImage = true;
		this.BindingNavigatorMoveLastItem.Size = new System.Drawing.Size(23, 20);
		this.BindingNavigatorMoveLastItem.Text = "Move last";
		//
		//BindingNavigatorSeparator2
		//
		this.BindingNavigatorSeparator2.Name = "BindingNavigatorSeparator";
		this.BindingNavigatorSeparator2.Size = new System.Drawing.Size(6, 6);
		//
		//BindingNavigatorAddNewItem
		//
		this.BindingNavigatorAddNewItem.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
		this.BindingNavigatorAddNewItem.Image = (System.Drawing.Image)resources.GetObject("BindingNavigatorAddNewItem.Image");
		this.BindingNavigatorAddNewItem.Name = "BindingNavigatorAddNewItem";
		this.BindingNavigatorAddNewItem.RightToLeftAutoMirrorImage = true;
		this.BindingNavigatorAddNewItem.Size = new System.Drawing.Size(23, 22);
		this.BindingNavigatorAddNewItem.Text = "Add new";
		//
		//BindingNavigatorDeleteItem
		//
		this.BindingNavigatorDeleteItem.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
		this.BindingNavigatorDeleteItem.Image = (System.Drawing.Image)resources.GetObject("BindingNavigatorDeleteItem.Image");
		this.BindingNavigatorDeleteItem.Name = "BindingNavigatorDeleteItem";
		this.BindingNavigatorDeleteItem.RightToLeftAutoMirrorImage = true;
		this.BindingNavigatorDeleteItem.Size = new System.Drawing.Size(23, 20);
		this.BindingNavigatorDeleteItem.Text = "Delete";
		//
		//Login_DetailsBindingNavigatorSaveItem
		//
		this.Login_DetailsBindingNavigatorSaveItem.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
		this.Login_DetailsBindingNavigatorSaveItem.Image = (System.Drawing.Image)resources.GetObject("Login_DetailsBindingNavigatorSaveItem.Image");
		this.Login_DetailsBindingNavigatorSaveItem.Name = "Login_DetailsBindingNavigatorSaveItem";
		this.Login_DetailsBindingNavigatorSaveItem.Size = new System.Drawing.Size(23, 23);
		this.Login_DetailsBindingNavigatorSaveItem.Text = "Save Data";
		//
		//Login_DetailsDataGridView
		//
		this.Login_DetailsDataGridView.AutoGenerateColumns = false;
		this.Login_DetailsDataGridView.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
		this.Login_DetailsDataGridView.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
			this.DataGridViewTextBoxColumn1,
			this.DataGridViewTextBoxColumn2,
			this.DataGridViewTextBoxColumn3,
			this.DataGridViewTextBoxColumn4,
			this.DataGridViewTextBoxColumn5
		});
		this.Login_DetailsDataGridView.DataSource = this.Login_DetailsBindingSource;
		this.Login_DetailsDataGridView.Location = new System.Drawing.Point(0, 50);
		this.Login_DetailsDataGridView.Name = "Login_DetailsDataGridView";
		this.Login_DetailsDataGridView.Size = new System.Drawing.Size(542, 290);
		this.Login_DetailsDataGridView.TabIndex = 1;
		//
		//DataGridViewTextBoxColumn1
		//
		this.DataGridViewTextBoxColumn1.DataPropertyName = "ID";
		this.DataGridViewTextBoxColumn1.HeaderText = "ID";
		this.DataGridViewTextBoxColumn1.Name = "DataGridViewTextBoxColumn1";
		//
		//DataGridViewTextBoxColumn2
		//
		this.DataGridViewTextBoxColumn2.DataPropertyName = "Username";
		this.DataGridViewTextBoxColumn2.HeaderText = "Username";
		this.DataGridViewTextBoxColumn2.Name = "DataGridViewTextBoxColumn2";
		//
		//DataGridViewTextBoxColumn3
		//
		this.DataGridViewTextBoxColumn3.DataPropertyName = "Password";
		this.DataGridViewTextBoxColumn3.HeaderText = "Password";
		this.DataGridViewTextBoxColumn3.Name = "DataGridViewTextBoxColumn3";
		//
		//DataGridViewTextBoxColumn4
		//
		this.DataGridViewTextBoxColumn4.DataPropertyName = "BadLogin";
		this.DataGridViewTextBoxColumn4.HeaderText = "BadLogin";
		this.DataGridViewTextBoxColumn4.Name = "DataGridViewTextBoxColumn4";
		//
		//DataGridViewTextBoxColumn5
		//
		this.DataGridViewTextBoxColumn5.DataPropertyName = "UserType";
		this.DataGridViewTextBoxColumn5.HeaderText = "UserType";
		this.DataGridViewTextBoxColumn5.Name = "DataGridViewTextBoxColumn5";
		//
		//EditUser
		//
		this.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
		this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
		this.ClientSize = new System.Drawing.Size(554, 369);
		this.Controls.Add(this.Login_DetailsDataGridView);
		this.Controls.Add(this.Login_DetailsBindingNavigator);
		this.Name = "EditUser";
		this.Text = "EditUser";
		((System.ComponentModel.ISupportInitialize)this.Login_DatabaseDataSet).EndInit();
		((System.ComponentModel.ISupportInitialize)this.Login_DetailsBindingSource).EndInit();
		((System.ComponentModel.ISupportInitialize)this.Login_DetailsBindingNavigator).EndInit();
		this.Login_DetailsBindingNavigator.ResumeLayout(false);
		this.Login_DetailsBindingNavigator.PerformLayout();
		((System.ComponentModel.ISupportInitialize)this.Login_DetailsDataGridView).EndInit();
		this.ResumeLayout(false);
		this.PerformLayout();

	}
	internal Code_Review_Site.Login_DatabaseDataSet Login_DatabaseDataSet;
	internal System.Windows.Forms.BindingSource Login_DetailsBindingSource;
	internal Code_Review_Site.Login_DatabaseDataSetTableAdapters.Login_DetailsTableAdapter Login_DetailsTableAdapter;
	internal Code_Review_Site.Login_DatabaseDataSetTableAdapters.TableAdapterManager TableAdapterManager;
	internal System.Windows.Forms.BindingNavigator Login_DetailsBindingNavigator;
	internal System.Windows.Forms.ToolStripButton BindingNavigatorAddNewItem;
	internal System.Windows.Forms.ToolStripLabel BindingNavigatorCountItem;
	internal System.Windows.Forms.ToolStripButton BindingNavigatorDeleteItem;
	internal System.Windows.Forms.ToolStripButton BindingNavigatorMoveFirstItem;
	internal System.Windows.Forms.ToolStripButton BindingNavigatorMovePreviousItem;
	internal System.Windows.Forms.ToolStripSeparator BindingNavigatorSeparator;
	internal System.Windows.Forms.ToolStripTextBox BindingNavigatorPositionItem;
	internal System.Windows.Forms.ToolStripSeparator BindingNavigatorSeparator1;
	internal System.Windows.Forms.ToolStripButton BindingNavigatorMoveNextItem;
	internal System.Windows.Forms.ToolStripButton BindingNavigatorMoveLastItem;
	internal System.Windows.Forms.ToolStripSeparator BindingNavigatorSeparator2;
	internal System.Windows.Forms.ToolStripButton Login_DetailsBindingNavigatorSaveItem;
	internal System.Windows.Forms.DataGridView Login_DetailsDataGridView;
	internal System.Windows.Forms.DataGridViewTextBoxColumn DataGridViewTextBoxColumn1;
	internal System.Windows.Forms.DataGridViewTextBoxColumn DataGridViewTextBoxColumn2;
	internal System.Windows.Forms.DataGridViewTextBoxColumn DataGridViewTextBoxColumn3;
	internal System.Windows.Forms.DataGridViewTextBoxColumn DataGridViewTextBoxColumn4;
	internal System.Windows.Forms.DataGridViewTextBoxColumn DataGridViewTextBoxColumn5;
	public EditUser()
	{
		InitializeComponent();
	}
}


Login Designer Code

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
[Microsoft.VisualBasic.CompilerServices.DesignerGenerated()]
partial class Login : System.Windows.Forms.Form
{

	//Form overrides dispose to clean up the component list.
	[System.Diagnostics.DebuggerNonUserCode()]
	protected override void Dispose(bool disposing)
	{
		try {
			if (disposing && components != null) {
				components.Dispose();
			}
		} finally {
			base.Dispose(disposing);
		}
	}

	//Required by the Windows Form Designer

	private System.ComponentModel.IContainer components;
	//NOTE: The following procedure is required by the Windows Form Designer
	//It can be modified using the Windows Form Designer.  
	//Do not modify it using the code editor.
	[System.Diagnostics.DebuggerStepThrough()]
	private void InitializeComponent()
	{
		this.ButtonSubmit = new System.Windows.Forms.Button();
		this.Label1 = new System.Windows.Forms.Label();
		this.TextBoxName = new System.Windows.Forms.TextBox();
		this.Label2 = new System.Windows.Forms.Label();
		this.MaskedTextBoxPassword = new System.Windows.Forms.MaskedTextBox();
		this.ButtonRequest = new System.Windows.Forms.Button();
		this.SuspendLayout();
		//
		//ButtonSubmit
		//
		this.ButtonSubmit.Location = new System.Drawing.Point(197, 227);
		this.ButtonSubmit.Name = "ButtonSubmit";
		this.ButtonSubmit.Size = new System.Drawing.Size(75, 23);
		this.ButtonSubmit.TabIndex = 0;
		this.ButtonSubmit.Text = "Submit";
		this.ButtonSubmit.UseVisualStyleBackColor = true;
		//
		//Label1
		//
		this.Label1.AutoSize = true;
		this.Label1.Location = new System.Drawing.Point(30, 112);
		this.Label1.Name = "Label1";
		this.Label1.Size = new System.Drawing.Size(53, 13);
		this.Label1.TabIndex = 2;
		this.Label1.Text = "Password";
		//
		//TextBoxName
		//
		this.TextBoxName.Location = new System.Drawing.Point(91, 55);
		this.TextBoxName.Name = "TextBoxName";
		this.TextBoxName.Size = new System.Drawing.Size(100, 20);
		this.TextBoxName.TabIndex = 3;
		//
		//Label2
		//
		this.Label2.AutoSize = true;
		this.Label2.Location = new System.Drawing.Point(30, 58);
		this.Label2.Name = "Label2";
		this.Label2.Size = new System.Drawing.Size(55, 13);
		this.Label2.TabIndex = 4;
		this.Label2.Text = "Username";
		//
		//MaskedTextBoxPassword
		//
		this.MaskedTextBoxPassword.Location = new System.Drawing.Point(91, 109);
		this.MaskedTextBoxPassword.Name = "MaskedTextBoxPassword";
		this.MaskedTextBoxPassword.PasswordChar = Strings.ChrW(42);
		this.MaskedTextBoxPassword.Size = new System.Drawing.Size(100, 20);
		this.MaskedTextBoxPassword.TabIndex = 5;
		//
		//ButtonRequest
		//
		this.ButtonRequest.Location = new System.Drawing.Point(33, 227);
		this.ButtonRequest.Name = "ButtonRequest";
		this.ButtonRequest.Size = new System.Drawing.Size(89, 23);
		this.ButtonRequest.TabIndex = 6;
		this.ButtonRequest.Text = "Request reset";
		this.ButtonRequest.UseVisualStyleBackColor = true;
		//
		//Login
		//
		this.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
		this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
		this.ClientSize = new System.Drawing.Size(284, 262);
		this.Controls.Add(this.ButtonRequest);
		this.Controls.Add(this.MaskedTextBoxPassword);
		this.Controls.Add(this.Label2);
		this.Controls.Add(this.TextBoxName);
		this.Controls.Add(this.Label1);
		this.Controls.Add(this.ButtonSubmit);
		this.Name = "Login";
		this.Text = "Login";
		this.ResumeLayout(false);
		this.PerformLayout();

	}
	internal System.Windows.Forms.Button ButtonSubmit;
	internal System.Windows.Forms.Label Label1;
	internal System.Windows.Forms.TextBox TextBoxName;
	internal System.Windows.Forms.Label Label2;
	internal System.Windows.Forms.MaskedTextBox MaskedTextBoxPassword;
	internal System.Windows.Forms.Button ButtonRequest;
	public Login()
	{
		InitializeComponent();
	}
}


Login Database Code

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------




///<summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
 // ERROR: Not supported in C#: OptionDeclaration
[System.Serializable(), System.ComponentModel.DesignerCategoryAttribute("code"), System.ComponentModel.ToolboxItem(true), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), System.Xml.Serialization.XmlRootAttribute("Login_DatabaseDataSet"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class Login_DatabaseDataSet : global::System.Data.DataSet
{

	private Login_DetailsDataTable tableLogin_Details;

	private Table_for_VBADataTable tableTable_for_VBA;

	private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	public Login_DatabaseDataSet() : base()
	{
		this.BeginInit();
		this.InitClass();
		global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = this.SchemaChanged;
		base.Tables.CollectionChanged += schemaChangedHandler;
		base.Relations.CollectionChanged += schemaChangedHandler;
		this.EndInit();
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	protected Login_DatabaseDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
	{
		if ((this.IsBinarySerialized(info, context) == true)) {
			this.InitVars(false);
			global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = this.SchemaChanged;
			this.Tables.CollectionChanged += schemaChangedHandler1;
			this.Relations.CollectionChanged += schemaChangedHandler1;
			return;
		}
		string strSchema = Convert.ToString(info.GetValue("XmlSchema", typeof(string)));
		if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
			global::System.Data.DataSet ds = new global::System.Data.DataSet();
			ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
			if ((((ds.Tables["Login Details"]) != null))) {
				base.Tables.Add(new Login_DetailsDataTable(ds.Tables["Login Details"]));
			}
			if ((((ds.Tables["Table for VBA"]) != null))) {
				base.Tables.Add(new Table_for_VBADataTable(ds.Tables["Table for VBA"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
			this.InitVars();
		} else {
			this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
		}
		this.GetSerializationData(info, context);
		global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = this.SchemaChanged;
		base.Tables.CollectionChanged += schemaChangedHandler;
		this.Relations.CollectionChanged += schemaChangedHandler;
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Browsable(false), System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
	public Login_DetailsDataTable Login_Details {
		get { return this.tableLogin_Details; }
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Browsable(false), System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
	public Table_for_VBADataTable Table_for_VBA {
		get { return this.tableTable_for_VBA; }
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.BrowsableAttribute(true), System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
	public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
		get { return this._schemaSerializationMode; }
		set { this._schemaSerializationMode = value; }
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
	public new global::System.Data.DataTableCollection Tables {
		get { return base.Tables; }
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
	public new global::System.Data.DataRelationCollection Relations {
		get { return base.Relations; }
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	protected override void InitializeDerivedDataSet()
	{
		this.BeginInit();
		this.InitClass();
		this.EndInit();
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	public override global::System.Data.DataSet Clone()
	{
		Login_DatabaseDataSet cln = (Login_DatabaseDataSet)base.Clone();
		cln.InitVars();
		cln.SchemaSerializationMode = this.SchemaSerializationMode;
		return cln;
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	protected override bool ShouldSerializeTables()
	{
		return false;
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	protected override bool ShouldSerializeRelations()
	{
		return false;
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader)
	{
		if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
			this.Reset();
			global::System.Data.DataSet ds = new global::System.Data.DataSet();
			ds.ReadXml(reader);
			if ((((ds.Tables["Login Details"]) != null))) {
				base.Tables.Add(new Login_DetailsDataTable(ds.Tables["Login Details"]));
			}
			if ((((ds.Tables["Table for VBA"]) != null))) {
				base.Tables.Add(new Table_for_VBADataTable(ds.Tables["Table for VBA"]));
			}
			this.DataSetName = ds.DataSetName;
			this.Prefix = ds.Prefix;
			this.Namespace = ds.Namespace;
			this.Locale = ds.Locale;
			this.CaseSensitive = ds.CaseSensitive;
			this.EnforceConstraints = ds.EnforceConstraints;
			this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
			this.InitVars();
		} else {
			this.ReadXml(reader);
			this.InitVars();
		}
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable()
	{
		global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
		this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
		stream.Position = 0;
		return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	internal void InitVars()
	{
		this.InitVars(true);
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	internal void InitVars(bool initTable)
	{
		this.tableLogin_Details = (Login_DetailsDataTable)base.Tables["Login Details"];
		if ((initTable == true)) {
			if ((((this.tableLogin_Details) != null))) {
				this.tableLogin_Details.InitVars();
			}
		}
		this.tableTable_for_VBA = (Table_for_VBADataTable)base.Tables["Table for VBA"];
		if ((initTable == true)) {
			if ((((this.tableTable_for_VBA) != null))) {
				this.tableTable_for_VBA.InitVars();
			}
		}
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	private void InitClass()
	{
		this.DataSetName = "Login_DatabaseDataSet";
		this.Prefix = "";
		this.Namespace = "http://tempuri.org/Login_DatabaseDataSet.xsd";
		this.EnforceConstraints = true;
		this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
		this.tableLogin_Details = new Login_DetailsDataTable();
		base.Tables.Add(this.tableLogin_Details);
		this.tableTable_for_VBA = new Table_for_VBADataTable();
		base.Tables.Add(this.tableTable_for_VBA);
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	private bool ShouldSerializeLogin_Details()
	{
		return false;
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	private bool ShouldSerializeTable_for_VBA()
	{
		return false;
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e)
	{
		if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
			this.InitVars();
		}
	}

	[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs)
	{
		Login_DatabaseDataSet ds = new Login_DatabaseDataSet();
		global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
		global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
		global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
		any.Namespace = ds.Namespace;
		sequence.Items.Add(any);
		type.Particle = sequence;
		global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
		if (xs.Contains(dsSchema.TargetNamespace)) {
			global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
			global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
			try {
				global::System.Xml.Schema.XmlSchema schema = null;
				dsSchema.Write(s1);
				global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
				while (schemas.MoveNext()) {
					schema = (global::System.Xml.Schema.XmlSchema)schemas.Current;
					s2.SetLength(0);
					schema.Write(s2);
					if ((s1.Length == s2.Length)) {
						s1.Position = 0;
						s2.Position = 0;

						while (((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))) {


						}
						if ((s1.Position == s1.Length)) {
							return type;
						}
					}

				}
			} finally {
				if ((((s1) != null))) {
					s1.Close();
				}
				if ((((s2) != null))) {
					s2.Close();
				}
			}
		}
		xs.Add(dsSchema);
		return type;
	}

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	public delegate void Login_DetailsRowChangeEventHandler(object sender, Login_DetailsRowChangeEvent e);

	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	public delegate void Table_for_VBARowChangeEventHandler(object sender, Table_for_VBARowChangeEvent e);

	///<summary>
	///Represents the strongly named DataTable class.
	///</summary>
	[System.Serializable(), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
	public partial class Login_DetailsDataTable : global::System.Data.TypedTableBase<Login_DetailsRow>
	{

		private global::System.Data.DataColumn columnID;

		private global::System.Data.DataColumn columnUsername;

		private global::System.Data.DataColumn columnPassword;

		private global::System.Data.DataColumn columnBadLogin;

		private global::System.Data.DataColumn columnUserType;

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Login_DetailsDataTable() : base()
		{
			this.TableName = "Login Details";
			this.BeginInit();
			this.InitClass();
			this.EndInit();
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		internal Login_DetailsDataTable(global::System.Data.DataTable table) : base()
		{
			this.TableName = table.TableName;
			if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
				this.CaseSensitive = table.CaseSensitive;
			}
			if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
				this.Locale = table.Locale;
			}
			if ((table.Namespace != table.DataSet.Namespace)) {
				this.Namespace = table.Namespace;
			}
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected Login_DetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
		{
			this.InitVars();
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataColumn IDColumn {
			get { return this.columnID; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataColumn UsernameColumn {
			get { return this.columnUsername; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataColumn PasswordColumn {
			get { return this.columnPassword; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataColumn BadLoginColumn {
			get { return this.columnBadLogin; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataColumn UserTypeColumn {
			get { return this.columnUserType; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Browsable(false)]
		public int Count {
			get { return this.Rows.Count; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Login_DetailsRow this[int index] {
			get { return (Login_DetailsRow)this.Rows(index); }
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public event Login_DetailsRowChangeEventHandler Login_DetailsRowChanging;

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public event Login_DetailsRowChangeEventHandler Login_DetailsRowChanged;

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public event Login_DetailsRowChangeEventHandler Login_DetailsRowDeleting;

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public event Login_DetailsRowChangeEventHandler Login_DetailsRowDeleted;

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void AddLogin_DetailsRow(Login_DetailsRow row)
		{
			this.Rows.Add(row);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Login_DetailsRow AddLogin_DetailsRow(string Username, string Password, int BadLogin, string UserType)
		{
			Login_DetailsRow rowLogin_DetailsRow = (Login_DetailsRow)this.NewRow;
			object[] columnValuesArray = new object[] {
				null,
				Username,
				Password,
				BadLogin,
				UserType
			};
			rowLogin_DetailsRow.ItemArray = columnValuesArray;
			this.Rows.Add(rowLogin_DetailsRow);
			return rowLogin_DetailsRow;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Login_DetailsRow FindByID(int ID)
		{
			return (Login_DetailsRow)this.Rows.Find(new object[] { ID });
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public override global::System.Data.DataTable Clone()
		{
			Login_DetailsDataTable cln = (Login_DetailsDataTable)base.Clone;
			cln.InitVars();
			return cln;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override global::System.Data.DataTable CreateInstance()
		{
			return new Login_DetailsDataTable();
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		internal void InitVars()
		{
			this.columnID = base.Columns("ID");
			this.columnUsername = base.Columns("Username");
			this.columnPassword = base.Columns("Password");
			this.columnBadLogin = base.Columns("BadLogin");
			this.columnUserType = base.Columns("UserType");
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private void InitClass()
		{
			this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
			base.Columns.Add(this.columnID);
			this.columnUsername = new global::System.Data.DataColumn("Username", typeof(string), null, global::System.Data.MappingType.Element);
			base.Columns.Add(this.columnUsername);
			this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
			base.Columns.Add(this.columnPassword);
			this.columnBadLogin = new global::System.Data.DataColumn("BadLogin", typeof(int), null, global::System.Data.MappingType.Element);
			base.Columns.Add(this.columnBadLogin);
			this.columnUserType = new global::System.Data.DataColumn("UserType", typeof(string), null, global::System.Data.MappingType.Element);
			base.Columns.Add(this.columnUserType);
			this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] { this.columnID }, true));
			this.columnID.AutoIncrement = true;
			this.columnID.AutoIncrementSeed = -1;
			this.columnID.AutoIncrementStep = -1;
			this.columnID.AllowDBNull = false;
			this.columnID.Unique = true;
			this.columnUsername.MaxLength = 255;
			this.columnPassword.MaxLength = 255;
			this.columnUserType.MaxLength = 255;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Login_DetailsRow NewLogin_DetailsRow()
		{
			return (Login_DetailsRow)this.NewRow;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
		{
			return new Login_DetailsRow(builder);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override global::System.Type GetRowType()
		{
			return typeof(Login_DetailsRow);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
		{
			base.OnRowChanged(e);
			if ((((this.Login_DetailsRowChangedEvent) != null))) {
				if (Login_DetailsRowChanged != null) {
					Login_DetailsRowChanged(this, new Login_DetailsRowChangeEvent((Login_DetailsRow)e.Row, e.Action));
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
		{
			base.OnRowChanging(e);
			if ((((this.Login_DetailsRowChangingEvent) != null))) {
				if (Login_DetailsRowChanging != null) {
					Login_DetailsRowChanging(this, new Login_DetailsRowChangeEvent((Login_DetailsRow)e.Row, e.Action));
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
		{
			base.OnRowDeleted(e);
			if ((((this.Login_DetailsRowDeletedEvent) != null))) {
				if (Login_DetailsRowDeleted != null) {
					Login_DetailsRowDeleted(this, new Login_DetailsRowChangeEvent((Login_DetailsRow)e.Row, e.Action));
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
		{
			base.OnRowDeleting(e);
			if ((((this.Login_DetailsRowDeletingEvent) != null))) {
				if (Login_DetailsRowDeleting != null) {
					Login_DetailsRowDeleting(this, new Login_DetailsRowChangeEvent((Login_DetailsRow)e.Row, e.Action));
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void RemoveLogin_DetailsRow(Login_DetailsRow row)
		{
			this.Rows.Remove(row);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
		{
			global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
			global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
			Login_DatabaseDataSet ds = new Login_DatabaseDataSet();
			global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
			any1.Namespace = "http://www.w3.org/2001/XMLSchema";
			any1.MinOccurs = new decimal(0);
			any1.MaxOccurs = decimal.MaxValue;
			any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
			sequence.Items.Add(any1);
			global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
			any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
			any2.MinOccurs = new decimal(1);
			any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
			sequence.Items.Add(any2);
			global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
			attribute1.Name = "namespace";
			attribute1.FixedValue = ds.Namespace;
			type.Attributes.Add(attribute1);
			global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
			attribute2.Name = "tableTypeName";
			attribute2.FixedValue = "Login_DetailsDataTable";
			type.Attributes.Add(attribute2);
			type.Particle = sequence;
			global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable;
			if (xs.Contains(dsSchema.TargetNamespace)) {
				global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
				global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
				try {
					global::System.Xml.Schema.XmlSchema schema = null;
					dsSchema.Write(s1);
					global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
					while (schemas.MoveNext()) {
						schema = (global::System.Xml.Schema.XmlSchema)schemas.Current;
						s2.SetLength(0);
						schema.Write(s2);
						if ((s1.Length == s2.Length)) {
							s1.Position = 0;
							s2.Position = 0;

							while (((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))) {


							}
							if ((s1.Position == s1.Length)) {
								return type;
							}
						}

					}
				} finally {
					if ((((s1) != null))) {
						s1.Close();
					}
					if ((((s2) != null))) {
						s2.Close();
					}
				}
			}
			xs.Add(dsSchema);
			return type;
		}
	}

	///<summary>
	///Represents the strongly named DataTable class.
	///</summary>
	[System.Serializable(), System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
	public partial class Table_for_VBADataTable : global::System.Data.TypedTableBase<Table_for_VBARow>
	{

		private global::System.Data.DataColumn columnID;

		private global::System.Data.DataColumn columnTitle;

		private global::System.Data.DataColumn columnFirst_Name;

		private global::System.Data.DataColumn columnLast_Name;

		private global::System.Data.DataColumn columnType_of_User;

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Table_for_VBADataTable() : base()
		{
			this.TableName = "Table for VBA";
			this.BeginInit();
			this.InitClass();
			this.EndInit();
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		internal Table_for_VBADataTable(global::System.Data.DataTable table) : base()
		{
			this.TableName = table.TableName;
			if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
				this.CaseSensitive = table.CaseSensitive;
			}
			if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
				this.Locale = table.Locale;
			}
			if ((table.Namespace != table.DataSet.Namespace)) {
				this.Namespace = table.Namespace;
			}
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected Table_for_VBADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
		{
			this.InitVars();
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataColumn IDColumn {
			get { return this.columnID; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataColumn TitleColumn {
			get { return this.columnTitle; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataColumn First_NameColumn {
			get { return this.columnFirst_Name; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataColumn Last_NameColumn {
			get { return this.columnLast_Name; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataColumn Type_of_UserColumn {
			get { return this.columnType_of_User; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Browsable(false)]
		public int Count {
			get { return this.Rows.Count; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Table_for_VBARow this[int index] {
			get { return (Table_for_VBARow)this.Rows(index); }
		}

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public event Table_for_VBARowChangeEventHandler Table_for_VBARowChanging;

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public event Table_for_VBARowChangeEventHandler Table_for_VBARowChanged;

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public event Table_for_VBARowChangeEventHandler Table_for_VBARowDeleting;

		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public event Table_for_VBARowChangeEventHandler Table_for_VBARowDeleted;

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void AddTable_for_VBARow(Table_for_VBARow row)
		{
			this.Rows.Add(row);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Table_for_VBARow AddTable_for_VBARow(string Title, string First_Name, string Last_Name, string Type_of_User)
		{
			Table_for_VBARow rowTable_for_VBARow = (Table_for_VBARow)this.NewRow;
			object[] columnValuesArray = new object[] {
				null,
				Title,
				First_Name,
				Last_Name,
				Type_of_User
			};
			rowTable_for_VBARow.ItemArray = columnValuesArray;
			this.Rows.Add(rowTable_for_VBARow);
			return rowTable_for_VBARow;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Table_for_VBARow FindByID(int ID)
		{
			return (Table_for_VBARow)this.Rows.Find(new object[] { ID });
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public override global::System.Data.DataTable Clone()
		{
			Table_for_VBADataTable cln = (Table_for_VBADataTable)base.Clone;
			cln.InitVars();
			return cln;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override global::System.Data.DataTable CreateInstance()
		{
			return new Table_for_VBADataTable();
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		internal void InitVars()
		{
			this.columnID = base.Columns("ID");
			this.columnTitle = base.Columns("Title");
			this.columnFirst_Name = base.Columns("First Name");
			this.columnLast_Name = base.Columns("Last Name");
			this.columnType_of_User = base.Columns("Type of User");
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private void InitClass()
		{
			this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
			base.Columns.Add(this.columnID);
			this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
			base.Columns.Add(this.columnTitle);
			this.columnFirst_Name = new global::System.Data.DataColumn("First Name", typeof(string), null, global::System.Data.MappingType.Element);
			base.Columns.Add(this.columnFirst_Name);
			this.columnLast_Name = new global::System.Data.DataColumn("Last Name", typeof(string), null, global::System.Data.MappingType.Element);
			base.Columns.Add(this.columnLast_Name);
			this.columnType_of_User = new global::System.Data.DataColumn("Type of User", typeof(string), null, global::System.Data.MappingType.Element);
			base.Columns.Add(this.columnType_of_User);
			this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] { this.columnID }, true));
			this.columnID.AutoIncrement = true;
			this.columnID.AutoIncrementSeed = -1;
			this.columnID.AutoIncrementStep = -1;
			this.columnID.AllowDBNull = false;
			this.columnID.Unique = true;
			this.columnTitle.MaxLength = 255;
			this.columnFirst_Name.MaxLength = 255;
			this.columnLast_Name.MaxLength = 255;
			this.columnType_of_User.MaxLength = 255;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Table_for_VBARow NewTable_for_VBARow()
		{
			return (Table_for_VBARow)this.NewRow;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder)
		{
			return new Table_for_VBARow(builder);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override global::System.Type GetRowType()
		{
			return typeof(Table_for_VBARow);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e)
		{
			base.OnRowChanged(e);
			if ((((this.Table_for_VBARowChangedEvent) != null))) {
				if (Table_for_VBARowChanged != null) {
					Table_for_VBARowChanged(this, new Table_for_VBARowChangeEvent((Table_for_VBARow)e.Row, e.Action));
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e)
		{
			base.OnRowChanging(e);
			if ((((this.Table_for_VBARowChangingEvent) != null))) {
				if (Table_for_VBARowChanging != null) {
					Table_for_VBARowChanging(this, new Table_for_VBARowChangeEvent((Table_for_VBARow)e.Row, e.Action));
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e)
		{
			base.OnRowDeleted(e);
			if ((((this.Table_for_VBARowDeletedEvent) != null))) {
				if (Table_for_VBARowDeleted != null) {
					Table_for_VBARowDeleted(this, new Table_for_VBARowChangeEvent((Table_for_VBARow)e.Row, e.Action));
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e)
		{
			base.OnRowDeleting(e);
			if ((((this.Table_for_VBARowDeletingEvent) != null))) {
				if (Table_for_VBARowDeleting != null) {
					Table_for_VBARowDeleting(this, new Table_for_VBARowChangeEvent((Table_for_VBARow)e.Row, e.Action));
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void RemoveTable_for_VBARow(Table_for_VBARow row)
		{
			this.Rows.Remove(row);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs)
		{
			global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
			global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
			Login_DatabaseDataSet ds = new Login_DatabaseDataSet();
			global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
			any1.Namespace = "http://www.w3.org/2001/XMLSchema";
			any1.MinOccurs = new decimal(0);
			any1.MaxOccurs = decimal.MaxValue;
			any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
			sequence.Items.Add(any1);
			global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
			any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
			any2.MinOccurs = new decimal(1);
			any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
			sequence.Items.Add(any2);
			global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
			attribute1.Name = "namespace";
			attribute1.FixedValue = ds.Namespace;
			type.Attributes.Add(attribute1);
			global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
			attribute2.Name = "tableTypeName";
			attribute2.FixedValue = "Table_for_VBADataTable";
			type.Attributes.Add(attribute2);
			type.Particle = sequence;
			global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable;
			if (xs.Contains(dsSchema.TargetNamespace)) {
				global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
				global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
				try {
					global::System.Xml.Schema.XmlSchema schema = null;
					dsSchema.Write(s1);
					global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
					while (schemas.MoveNext()) {
						schema = (global::System.Xml.Schema.XmlSchema)schemas.Current;
						s2.SetLength(0);
						schema.Write(s2);
						if ((s1.Length == s2.Length)) {
							s1.Position = 0;
							s2.Position = 0;

							while (((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()))) {


							}
							if ((s1.Position == s1.Length)) {
								return type;
							}
						}

					}
				} finally {
					if ((((s1) != null))) {
						s1.Close();
					}
					if ((((s2) != null))) {
						s2.Close();
					}
				}
			}
			xs.Add(dsSchema);
			return type;
		}
	}

	///<summary>
	///Represents strongly named DataRow class.
	///</summary>
	public partial class Login_DetailsRow : global::System.Data.DataRow
	{

		private Login_DetailsDataTable tableLogin_Details;

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		internal Login_DetailsRow(global::System.Data.DataRowBuilder rb) : base(rb)
		{
			this.tableLogin_Details = (Login_DetailsDataTable)this.Table;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public int ID {
			get { return Convert.ToInt32(this[this.tableLogin_Details.IDColumn]); }
			set { this[this.tableLogin_Details.IDColumn] = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public string Username {
			get {
				try {
					return Convert.ToString(this[this.tableLogin_Details.UsernameColumn]);
				} catch (System.InvalidCastException e) {
					throw new global::System.Data.StrongTypingException("The value for column 'Username' in table 'Login Details' is DBNull.", e);
				}
			}
			set { this[this.tableLogin_Details.UsernameColumn] = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public string Password {
			get {
				try {
					return Convert.ToString(this[this.tableLogin_Details.PasswordColumn]);
				} catch (System.InvalidCastException e) {
					throw new global::System.Data.StrongTypingException("The value for column 'Password' in table 'Login Details' is DBNull.", e);
				}
			}
			set { this[this.tableLogin_Details.PasswordColumn] = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public int BadLogin {
			get {
				try {
					return Convert.ToInt32(this[this.tableLogin_Details.BadLoginColumn]);
				} catch (System.InvalidCastException e) {
					throw new global::System.Data.StrongTypingException("The value for column 'BadLogin' in table 'Login Details' is DBNull.", e);
				}
			}
			set { this[this.tableLogin_Details.BadLoginColumn] = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public string UserType {
			get {
				try {
					return Convert.ToString(this[this.tableLogin_Details.UserTypeColumn]);
				} catch (System.InvalidCastException e) {
					throw new global::System.Data.StrongTypingException("The value for column 'UserType' in table 'Login Details' is DBNull.", e);
				}
			}
			set { this[this.tableLogin_Details.UserTypeColumn] = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public bool IsUsernameNull()
		{
			return this.IsNull(this.tableLogin_Details.UsernameColumn);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void SetUsernameNull()
		{
			this[this.tableLogin_Details.UsernameColumn] = global::System.Convert.DBNull;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public bool IsPasswordNull()
		{
			return this.IsNull(this.tableLogin_Details.PasswordColumn);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void SetPasswordNull()
		{
			this[this.tableLogin_Details.PasswordColumn] = global::System.Convert.DBNull;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public bool IsBadLoginNull()
		{
			return this.IsNull(this.tableLogin_Details.BadLoginColumn);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void SetBadLoginNull()
		{
			this[this.tableLogin_Details.BadLoginColumn] = global::System.Convert.DBNull;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public bool IsUserTypeNull()
		{
			return this.IsNull(this.tableLogin_Details.UserTypeColumn);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void SetUserTypeNull()
		{
			this[this.tableLogin_Details.UserTypeColumn] = global::System.Convert.DBNull;
		}
	}

	///<summary>
	///Represents strongly named DataRow class.
	///</summary>
	public partial class Table_for_VBARow : global::System.Data.DataRow
	{

		private Table_for_VBADataTable tableTable_for_VBA;

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		internal Table_for_VBARow(global::System.Data.DataRowBuilder rb) : base(rb)
		{
			this.tableTable_for_VBA = (Table_for_VBADataTable)this.Table;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public int ID {
			get { return Convert.ToInt32(this[this.tableTable_for_VBA.IDColumn]); }
			set { this[this.tableTable_for_VBA.IDColumn] = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public string Title {
			get {
				try {
					return Convert.ToString(this[this.tableTable_for_VBA.TitleColumn]);
				} catch (System.InvalidCastException e) {
					throw new global::System.Data.StrongTypingException("The value for column 'Title' in table 'Table for VBA' is DBNull.", e);
				}
			}
			set { this[this.tableTable_for_VBA.TitleColumn] = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public string First_Name {
			get {
				try {
					return Convert.ToString(this[this.tableTable_for_VBA.First_NameColumn]);
				} catch (System.InvalidCastException e) {
					throw new global::System.Data.StrongTypingException("The value for column 'First Name' in table 'Table for VBA' is DBNull.", e);
				}
			}
			set { this[this.tableTable_for_VBA.First_NameColumn] = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public string Last_Name {
			get {
				try {
					return Convert.ToString(this[this.tableTable_for_VBA.Last_NameColumn]);
				} catch (System.InvalidCastException e) {
					throw new global::System.Data.StrongTypingException("The value for column 'Last Name' in table 'Table for VBA' is DBNull.", e);
				}
			}
			set { this[this.tableTable_for_VBA.Last_NameColumn] = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public string Type_of_User {
			get {
				try {
					return Convert.ToString(this[this.tableTable_for_VBA.Type_of_UserColumn]);
				} catch (System.InvalidCastException e) {
					throw new global::System.Data.StrongTypingException("The value for column 'Type of User' in table 'Table for VBA' is DBNull.", e);
				}
			}
			set { this[this.tableTable_for_VBA.Type_of_UserColumn] = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public bool IsTitleNull()
		{
			return this.IsNull(this.tableTable_for_VBA.TitleColumn);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void SetTitleNull()
		{
			this[this.tableTable_for_VBA.TitleColumn] = global::System.Convert.DBNull;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public bool IsFirst_NameNull()
		{
			return this.IsNull(this.tableTable_for_VBA.First_NameColumn);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void SetFirst_NameNull()
		{
			this[this.tableTable_for_VBA.First_NameColumn] = global::System.Convert.DBNull;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public bool IsLast_NameNull()
		{
			return this.IsNull(this.tableTable_for_VBA.Last_NameColumn);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void SetLast_NameNull()
		{
			this[this.tableTable_for_VBA.Last_NameColumn] = global::System.Convert.DBNull;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public bool IsType_of_UserNull()
		{
			return this.IsNull(this.tableTable_for_VBA.Type_of_UserColumn);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public void SetType_of_UserNull()
		{
			this[this.tableTable_for_VBA.Type_of_UserColumn] = global::System.Convert.DBNull;
		}
	}

	///<summary>
	///Row event argument class
	///</summary>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	public class Login_DetailsRowChangeEvent : global::System.EventArgs
	{

		private Login_DetailsRow eventRow;

		private global::System.Data.DataRowAction eventAction;

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Login_DetailsRowChangeEvent(Login_DetailsRow row, global::System.Data.DataRowAction action) : base()
		{
			this.eventRow = row;
			this.eventAction = action;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Login_DetailsRow Row {
			get { return this.eventRow; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataRowAction Action {
			get { return this.eventAction; }
		}
	}

	///<summary>
	///Row event argument class
	///</summary>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
	public class Table_for_VBARowChangeEvent : global::System.EventArgs
	{

		private Table_for_VBARow eventRow;

		private global::System.Data.DataRowAction eventAction;

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Table_for_VBARowChangeEvent(Table_for_VBARow row, global::System.Data.DataRowAction action) : base()
		{
			this.eventRow = row;
			this.eventAction = action;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Table_for_VBARow Row {
			get { return this.eventRow; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public global::System.Data.DataRowAction Action {
			get { return this.eventAction; }
		}
	}
}

namespace Login_DatabaseDataSetTableAdapters
{

	///<summary>
	///Represents the connection and commands used to retrieve and save data.
	///</summary>
	[System.ComponentModel.DesignerCategoryAttribute("code"), System.ComponentModel.ToolboxItem(true), System.ComponentModel.DataObjectAttribute(true), System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class Login_DetailsTableAdapter : global::System.ComponentModel.Component
	{

		private global::System.Data.OleDb.OleDbDataAdapter _adapter;

		private global::System.Data.OleDb.OleDbConnection _connection;

		private global::System.Data.OleDb.OleDbTransaction _transaction;

		private global::System.Data.OleDb.OleDbCommand[] _commandCollection;

		private bool _clearBeforeFill;

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Login_DetailsTableAdapter() : base()
		{
			this.ClearBeforeFill = true;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
			get {
				if ((this._adapter == null)) {
					this.InitAdapter();
				}
				return this._adapter;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		internal global::System.Data.OleDb.OleDbConnection Connection {
			get {
				if ((this._connection == null)) {
					this.InitConnection();
				}
				return this._connection;
			}
			set {
				this._connection = value;
				if ((((this.Adapter.InsertCommand) != null))) {
					this.Adapter.InsertCommand.Connection = value;
				}
				if ((((this.Adapter.DeleteCommand) != null))) {
					this.Adapter.DeleteCommand.Connection = value;
				}
				if ((((this.Adapter.UpdateCommand) != null))) {
					this.Adapter.UpdateCommand.Connection = value;
				}
				int i = 0;
				while ((i < this.CommandCollection.Length)) {
					if ((((this.CommandCollection[i]) != null))) {
						((global::System.Data.OleDb.OleDbCommand)this.CommandCollection[i]).Connection = value;
					}
					i = (i + 1);
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		internal global::System.Data.OleDb.OleDbTransaction Transaction {
			get { return this._transaction; }
			set {
				this._transaction = value;
				int i = 0;
				while ((i < this.CommandCollection.Length)) {
					this.CommandCollection[i].Transaction = this._transaction;
					i = (i + 1);
				}
				if (((((this.Adapter) != null)) && (((this.Adapter.DeleteCommand) != null)))) {
					this.Adapter.DeleteCommand.Transaction = this._transaction;
				}
				if (((((this.Adapter) != null)) && (((this.Adapter.InsertCommand) != null)))) {
					this.Adapter.InsertCommand.Transaction = this._transaction;
				}
				if (((((this.Adapter) != null)) && (((this.Adapter.UpdateCommand) != null)))) {
					this.Adapter.UpdateCommand.Transaction = this._transaction;
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public bool ClearBeforeFill {
			get { return this._clearBeforeFill; }
			set { this._clearBeforeFill = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private void InitAdapter()
		{
			this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
			global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
			tableMapping.SourceTable = "Table";
			tableMapping.DataSetTable = "Login Details";
			tableMapping.ColumnMappings.Add("ID", "ID");
			tableMapping.ColumnMappings.Add("Username", "Username");
			tableMapping.ColumnMappings.Add("Password", "Password");
			tableMapping.ColumnMappings.Add("BadLogin", "BadLogin");
			tableMapping.ColumnMappings.Add("UserType", "UserType");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;
			this._adapter.DeleteCommand.CommandText = "DELETE FROM `Login Details` WHERE ((`ID` = ?) AND ((? = 1 AND `Username` IS NULL)" + " OR (`Username` = ?)) AND ((? = 1 AND `Password` IS NULL) OR (`Password` = ?)) A" + "ND ((? = 1 AND `BadLogin` IS NULL) OR (`BadLogin` = ?)) AND ((? = 1 AND `UserTyp" + "e` IS NULL) OR (`UserType` = ?)))";
			this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "ID", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Username", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Username", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Username", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Username", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Password", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Password", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Password", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Password", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BadLogin", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "BadLogin", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BadLogin", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "BadLogin", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_UserType", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "UserType", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_UserType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "UserType", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
			this._adapter.InsertCommand.Connection = this.Connection;
			this._adapter.InsertCommand.CommandText = "INSERT INTO `Login Details` (`Username`, `Password`, `BadLogin`, `UserType`) VALU" + "ES (?, ?, ?, ?)";
			this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Username", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Username", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Password", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Password", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BadLogin", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "BadLogin", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("UserType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "UserType", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;
			this._adapter.UpdateCommand.CommandText = "UPDATE `Login Details` SET `Username` = ?, `Password` = ?, `BadLogin` = ?, `UserT" + "ype` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `Username` IS NULL) OR (`Username` = " + "?)) AND ((? = 1 AND `Password` IS NULL) OR (`Password` = ?)) AND ((? = 1 AND `Ba" + "dLogin` IS NULL) OR (`BadLogin` = ?)) AND ((? = 1 AND `UserType` IS NULL) OR (`U" + "serType` = ?)))";
			this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Username", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Username", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Password", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Password", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BadLogin", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "BadLogin", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("UserType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "UserType", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "ID", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Username", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Username", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Username", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Username", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Password", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Password", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Password", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Password", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BadLogin", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "BadLogin", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BadLogin", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "BadLogin", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_UserType", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "UserType", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_UserType", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "UserType", global::System.Data.DataRowVersion.Original, false, null));
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private void InitConnection()
		{
			this._connection = new global::System.Data.OleDb.OleDbConnection();
			this._connection.ConnectionString = global::Code_Review_Site.My.MySettings.Default.Login_DatabaseConnectionString;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private void InitCommandCollection()
		{
			this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
			this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
			this._commandCollection[0].Connection = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, Username, [Password], BadLogin, UserType FROM [Login Details]";
			this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
		public virtual int Fill(Login_DatabaseDataSet.Login_DetailsDataTable dataTable)
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
		public virtual Login_DatabaseDataSet.Login_DetailsDataTable GetData()
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];
			Login_DatabaseDataSet.Login_DetailsDataTable dataTable = new Login_DatabaseDataSet.Login_DetailsDataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(Login_DatabaseDataSet.Login_DetailsDataTable dataTable)
		{
			return this.Adapter.Update(dataTable);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(Login_DatabaseDataSet dataSet)
		{
			return this.Adapter.Update(dataSet, "Login Details");
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow dataRow)
		{
			return this.Adapter.Update(new global::System.Data.DataRow[] { dataRow });
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow[] dataRows)
		{
			return this.Adapter.Update(dataRows);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, string Original_Username, string Original_Password, global::System.Nullable<int> Original_BadLogin, string Original_UserType)
		{
			this.Adapter.DeleteCommand.Parameters[0].Value = Convert.ToInt32(Original_ID);
			if ((Original_Username == null)) {
				this.Adapter.DeleteCommand.Parameters[1].Value = (object)1;
				this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.DeleteCommand.Parameters[1].Value = (object)0;
				this.Adapter.DeleteCommand.Parameters[2].Value = Convert.ToString(Original_Username);
			}
			if ((Original_Password == null)) {
				this.Adapter.DeleteCommand.Parameters[3].Value = (object)1;
				this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.DeleteCommand.Parameters[3].Value = (object)0;
				this.Adapter.DeleteCommand.Parameters[4].Value = Convert.ToString(Original_Password);
			}
			if ((Original_BadLogin.HasValue == true)) {
				this.Adapter.DeleteCommand.Parameters[5].Value = (object)0;
				this.Adapter.DeleteCommand.Parameters[6].Value = Convert.ToInt32(Original_BadLogin.Value);
			} else {
				this.Adapter.DeleteCommand.Parameters[5].Value = (object)1;
				this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
			}
			if ((Original_UserType == null)) {
				this.Adapter.DeleteCommand.Parameters[7].Value = (object)1;
				this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.DeleteCommand.Parameters[7].Value = (object)0;
				this.Adapter.DeleteCommand.Parameters[8].Value = Convert.ToString(Original_UserType);
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
			if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)) {
				this.Adapter.DeleteCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
				return returnValue;
			} finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
		public virtual int Insert(string Username, string Password, global::System.Nullable<int> BadLogin, string UserType)
		{
			if ((Username == null)) {
				this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.InsertCommand.Parameters[0].Value = Convert.ToString(Username);
			}
			if ((Password == null)) {
				this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.InsertCommand.Parameters[1].Value = Convert.ToString(Password);
			}
			if ((BadLogin.HasValue == true)) {
				this.Adapter.InsertCommand.Parameters[2].Value = Convert.ToInt32(BadLogin.Value);
			} else {
				this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((UserType == null)) {
				this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.InsertCommand.Parameters[3].Value = Convert.ToString(UserType);
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
			if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)) {
				this.Adapter.InsertCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
				return returnValue;
			} finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(string Username, string Password, global::System.Nullable<int> BadLogin, string UserType, int Original_ID, string Original_Username, string Original_Password, global::System.Nullable<int> Original_BadLogin, string Original_UserType)
		{
			if ((Username == null)) {
				this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[0].Value = Convert.ToString(Username);
			}
			if ((Password == null)) {
				this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[1].Value = Convert.ToString(Password);
			}
			if ((BadLogin.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[2].Value = Convert.ToInt32(BadLogin.Value);
			} else {
				this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
			}
			if ((UserType == null)) {
				this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[3].Value = Convert.ToString(UserType);
			}
			this.Adapter.UpdateCommand.Parameters[4].Value = Convert.ToInt32(Original_ID);
			if ((Original_Username == null)) {
				this.Adapter.UpdateCommand.Parameters[5].Value = (object)1;
				this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[5].Value = (object)0;
				this.Adapter.UpdateCommand.Parameters[6].Value = Convert.ToString(Original_Username);
			}
			if ((Original_Password == null)) {
				this.Adapter.UpdateCommand.Parameters[7].Value = (object)1;
				this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[7].Value = (object)0;
				this.Adapter.UpdateCommand.Parameters[8].Value = Convert.ToString(Original_Password);
			}
			if ((Original_BadLogin.HasValue == true)) {
				this.Adapter.UpdateCommand.Parameters[9].Value = (object)0;
				this.Adapter.UpdateCommand.Parameters[10].Value = Convert.ToInt32(Original_BadLogin.Value);
			} else {
				this.Adapter.UpdateCommand.Parameters[9].Value = (object)1;
				this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
			}
			if ((Original_UserType == null)) {
				this.Adapter.UpdateCommand.Parameters[11].Value = (object)1;
				this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[11].Value = (object)0;
				this.Adapter.UpdateCommand.Parameters[12].Value = Convert.ToString(Original_UserType);
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
			if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)) {
				this.Adapter.UpdateCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
				return returnValue;
			} finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
	}

	///<summary>
	///Represents the connection and commands used to retrieve and save data.
	///</summary>
	[System.ComponentModel.DesignerCategoryAttribute("code"), System.ComponentModel.ToolboxItem(true), System.ComponentModel.DataObjectAttribute(true), System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
	public partial class Table_for_VBATableAdapter : global::System.ComponentModel.Component
	{

		private global::System.Data.OleDb.OleDbDataAdapter _adapter;

		private global::System.Data.OleDb.OleDbConnection _connection;

		private global::System.Data.OleDb.OleDbTransaction _transaction;

		private global::System.Data.OleDb.OleDbCommand[] _commandCollection;

		private bool _clearBeforeFill;

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public Table_for_VBATableAdapter() : base()
		{
			this.ClearBeforeFill = true;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
			get {
				if ((this._adapter == null)) {
					this.InitAdapter();
				}
				return this._adapter;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		internal global::System.Data.OleDb.OleDbConnection Connection {
			get {
				if ((this._connection == null)) {
					this.InitConnection();
				}
				return this._connection;
			}
			set {
				this._connection = value;
				if ((((this.Adapter.InsertCommand) != null))) {
					this.Adapter.InsertCommand.Connection = value;
				}
				if ((((this.Adapter.DeleteCommand) != null))) {
					this.Adapter.DeleteCommand.Connection = value;
				}
				if ((((this.Adapter.UpdateCommand) != null))) {
					this.Adapter.UpdateCommand.Connection = value;
				}
				int i = 0;
				while ((i < this.CommandCollection.Length)) {
					if ((((this.CommandCollection[i]) != null))) {
						((global::System.Data.OleDb.OleDbCommand)this.CommandCollection[i]).Connection = value;
					}
					i = (i + 1);
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		internal global::System.Data.OleDb.OleDbTransaction Transaction {
			get { return this._transaction; }
			set {
				this._transaction = value;
				int i = 0;
				while ((i < this.CommandCollection.Length)) {
					this.CommandCollection[i].Transaction = this._transaction;
					i = (i + 1);
				}
				if (((((this.Adapter) != null)) && (((this.Adapter.DeleteCommand) != null)))) {
					this.Adapter.DeleteCommand.Transaction = this._transaction;
				}
				if (((((this.Adapter) != null)) && (((this.Adapter.InsertCommand) != null)))) {
					this.Adapter.InsertCommand.Transaction = this._transaction;
				}
				if (((((this.Adapter) != null)) && (((this.Adapter.UpdateCommand) != null)))) {
					this.Adapter.UpdateCommand.Transaction = this._transaction;
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
			get {
				if ((this._commandCollection == null)) {
					this.InitCommandCollection();
				}
				return this._commandCollection;
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public bool ClearBeforeFill {
			get { return this._clearBeforeFill; }
			set { this._clearBeforeFill = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private void InitAdapter()
		{
			this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
			global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
			tableMapping.SourceTable = "Table";
			tableMapping.DataSetTable = "Table for VBA";
			tableMapping.ColumnMappings.Add("ID", "ID");
			tableMapping.ColumnMappings.Add("Title", "Title");
			tableMapping.ColumnMappings.Add("First Name", "First Name");
			tableMapping.ColumnMappings.Add("Last Name", "Last Name");
			tableMapping.ColumnMappings.Add("Type of User", "Type of User");
			this._adapter.TableMappings.Add(tableMapping);
			this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
			this._adapter.DeleteCommand.Connection = this.Connection;
			this._adapter.DeleteCommand.CommandText = "DELETE FROM `Table for VBA` WHERE ((`ID` = ?) AND ((? = 1 AND `Title` IS NULL) OR" + " (`Title` = ?)) AND ((? = 1 AND `First Name` IS NULL) OR (`First Name` = ?)) AND" + " ((? = 1 AND `Last Name` IS NULL) OR (`Last Name` = ?)) AND ((? = 1 AND `Type of" + " User` IS NULL) OR (`Type of User` = ?)))";
			this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "ID", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Title", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Title", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Title", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Title", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_First_Name", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "First Name", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_First_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "First Name", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Last_Name", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Last Name", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Last_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Last Name", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Type_of_User", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Type of User", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Type_of_User", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Type of User", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
			this._adapter.InsertCommand.Connection = this.Connection;
			this._adapter.InsertCommand.CommandText = "INSERT INTO `Table for VBA` (`Title`, `First Name`, `Last Name`, `Type of User`) " + "VALUES (?, ?, ?, ?)";
			this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Title", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Title", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("First_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "First Name", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Last_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Last Name", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Type_of_User", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Type of User", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
			this._adapter.UpdateCommand.Connection = this.Connection;
			this._adapter.UpdateCommand.CommandText = "UPDATE `Table for VBA` SET `Title` = ?, `First Name` = ?, `Last Name` = ?, `Type " + "of User` = ? WHERE ((`ID` = ?) AND ((? = 1 AND `Title` IS NULL) OR (`Title` = ?)" + ") AND ((? = 1 AND `First Name` IS NULL) OR (`First Name` = ?)) AND ((? = 1 AND `" + "Last Name` IS NULL) OR (`Last Name` = ?)) AND ((? = 1 AND `Type of User` IS NULL" + ") OR (`Type of User` = ?)))";
			this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Title", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Title", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("First_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "First Name", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Last_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Last Name", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Type_of_User", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Type of User", global::System.Data.DataRowVersion.Current, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "ID", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Title", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Title", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Title", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Title", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_First_Name", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "First Name", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_First_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "First Name", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Last_Name", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Last Name", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Last_Name", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Last Name", global::System.Data.DataRowVersion.Original, false, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Type_of_User", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Type of User", global::System.Data.DataRowVersion.Original, true, null));
			this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Type_of_User", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, Convert.ToByte(0), Convert.ToByte(0), "Type of User", global::System.Data.DataRowVersion.Original, false, null));
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private void InitConnection()
		{
			this._connection = new global::System.Data.OleDb.OleDbConnection();
			this._connection.ConnectionString = global::Code_Review_Site.My.MySettings.Default.Login_DatabaseConnectionString;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private void InitCommandCollection()
		{
			this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
			this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
			this._commandCollection[0].Connection = this.Connection;
			this._commandCollection[0].CommandText = "SELECT ID, Title, [First Name], [Last Name], [Type of User] FROM [Table for VBA]";
			this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
		public virtual int Fill(Login_DatabaseDataSet.Table_for_VBADataTable dataTable)
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];
			if ((this.ClearBeforeFill == true)) {
				dataTable.Clear();
			}
			int returnValue = this.Adapter.Fill(dataTable);
			return returnValue;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
		public virtual Login_DatabaseDataSet.Table_for_VBADataTable GetData()
		{
			this.Adapter.SelectCommand = this.CommandCollection[0];
			Login_DatabaseDataSet.Table_for_VBADataTable dataTable = new Login_DatabaseDataSet.Table_for_VBADataTable();
			this.Adapter.Fill(dataTable);
			return dataTable;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(Login_DatabaseDataSet.Table_for_VBADataTable dataTable)
		{
			return this.Adapter.Update(dataTable);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(Login_DatabaseDataSet dataSet)
		{
			return this.Adapter.Update(dataSet, "Table for VBA");
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow dataRow)
		{
			return this.Adapter.Update(new global::System.Data.DataRow[] { dataRow });
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
		public virtual int Update(global::System.Data.DataRow[] dataRows)
		{
			return this.Adapter.Update(dataRows);
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
		public virtual int Delete(int Original_ID, string Original_Title, string Original_First_Name, string Original_Last_Name, string Original_Type_of_User)
		{
			this.Adapter.DeleteCommand.Parameters[0].Value = Convert.ToInt32(Original_ID);
			if ((Original_Title == null)) {
				this.Adapter.DeleteCommand.Parameters[1].Value = (object)1;
				this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.DeleteCommand.Parameters[1].Value = (object)0;
				this.Adapter.DeleteCommand.Parameters[2].Value = Convert.ToString(Original_Title);
			}
			if ((Original_First_Name == null)) {
				this.Adapter.DeleteCommand.Parameters[3].Value = (object)1;
				this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.DeleteCommand.Parameters[3].Value = (object)0;
				this.Adapter.DeleteCommand.Parameters[4].Value = Convert.ToString(Original_First_Name);
			}
			if ((Original_Last_Name == null)) {
				this.Adapter.DeleteCommand.Parameters[5].Value = (object)1;
				this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.DeleteCommand.Parameters[5].Value = (object)0;
				this.Adapter.DeleteCommand.Parameters[6].Value = Convert.ToString(Original_Last_Name);
			}
			if ((Original_Type_of_User == null)) {
				this.Adapter.DeleteCommand.Parameters[7].Value = (object)1;
				this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.DeleteCommand.Parameters[7].Value = (object)0;
				this.Adapter.DeleteCommand.Parameters[8].Value = Convert.ToString(Original_Type_of_User);
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
			if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)) {
				this.Adapter.DeleteCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
				return returnValue;
			} finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.DeleteCommand.Connection.Close();
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
		public virtual int Insert(string Title, string First_Name, string Last_Name, string Type_of_User)
		{
			if ((Title == null)) {
				this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.InsertCommand.Parameters[0].Value = Convert.ToString(Title);
			}
			if ((First_Name == null)) {
				this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.InsertCommand.Parameters[1].Value = Convert.ToString(First_Name);
			}
			if ((Last_Name == null)) {
				this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.InsertCommand.Parameters[2].Value = Convert.ToString(Last_Name);
			}
			if ((Type_of_User == null)) {
				this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.InsertCommand.Parameters[3].Value = Convert.ToString(Type_of_User);
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
			if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)) {
				this.Adapter.InsertCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
				return returnValue;
			} finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.InsertCommand.Connection.Close();
				}
			}
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
		public virtual int Update(string Title, string First_Name, string Last_Name, string Type_of_User, int Original_ID, string Original_Title, string Original_First_Name, string Original_Last_Name, string Original_Type_of_User)
		{
			if ((Title == null)) {
				this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[0].Value = Convert.ToString(Title);
			}
			if ((First_Name == null)) {
				this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[1].Value = Convert.ToString(First_Name);
			}
			if ((Last_Name == null)) {
				this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[2].Value = Convert.ToString(Last_Name);
			}
			if ((Type_of_User == null)) {
				this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[3].Value = Convert.ToString(Type_of_User);
			}
			this.Adapter.UpdateCommand.Parameters[4].Value = Convert.ToInt32(Original_ID);
			if ((Original_Title == null)) {
				this.Adapter.UpdateCommand.Parameters[5].Value = (object)1;
				this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[5].Value = (object)0;
				this.Adapter.UpdateCommand.Parameters[6].Value = Convert.ToString(Original_Title);
			}
			if ((Original_First_Name == null)) {
				this.Adapter.UpdateCommand.Parameters[7].Value = (object)1;
				this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[7].Value = (object)0;
				this.Adapter.UpdateCommand.Parameters[8].Value = Convert.ToString(Original_First_Name);
			}
			if ((Original_Last_Name == null)) {
				this.Adapter.UpdateCommand.Parameters[9].Value = (object)1;
				this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[9].Value = (object)0;
				this.Adapter.UpdateCommand.Parameters[10].Value = Convert.ToString(Original_Last_Name);
			}
			if ((Original_Type_of_User == null)) {
				this.Adapter.UpdateCommand.Parameters[11].Value = (object)1;
				this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
			} else {
				this.Adapter.UpdateCommand.Parameters[11].Value = (object)0;
				this.Adapter.UpdateCommand.Parameters[12].Value = Convert.ToString(Original_Type_of_User);
			}
			global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
			if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) != global::System.Data.ConnectionState.Open)) {
				this.Adapter.UpdateCommand.Connection.Open();
			}
			try {
				int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
				return returnValue;
			} finally {
				if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
					this.Adapter.UpdateCommand.Connection.Close();
				}
			}
		}
	}

	///<summary>
	///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
	///</summary>
	[System.ComponentModel.DesignerCategoryAttribute("code"), System.ComponentModel.ToolboxItem(true), System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" + "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
	public partial class TableAdapterManager : global::System.ComponentModel.Component
	{

		private UpdateOrderOption _updateOrder;

		private Login_DetailsTableAdapter _login_DetailsTableAdapter;

		private Table_for_VBATableAdapter _table_for_VBATableAdapter;

		private bool _backupDataSetBeforeUpdate;

		private global::System.Data.IDbConnection _connection;

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public UpdateOrderOption UpdateOrder {
			get { return this._updateOrder; }
			set { this._updateOrder = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]
		public Login_DetailsTableAdapter Login_DetailsTableAdapter {
			get { return this._login_DetailsTableAdapter; }
			set { this._login_DetailsTableAdapter = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]
		public Table_for_VBATableAdapter Table_for_VBATableAdapter {
			get { return this._table_for_VBATableAdapter; }
			set { this._table_for_VBATableAdapter = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public bool BackupDataSetBeforeUpdate {
			get { return this._backupDataSetBeforeUpdate; }
			set { this._backupDataSetBeforeUpdate = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Browsable(false)]
		public global::System.Data.IDbConnection Connection {
			get {
				if ((((this._connection) != null))) {
					return this._connection;
				}
				if (((((this._login_DetailsTableAdapter) != null)) && (((this._login_DetailsTableAdapter.Connection) != null)))) {
					return this._login_DetailsTableAdapter.Connection;
				}
				if (((((this._table_for_VBATableAdapter) != null)) && (((this._table_for_VBATableAdapter.Connection) != null)))) {
					return this._table_for_VBATableAdapter.Connection;
				}
				return null;
			}
			set { this._connection = value; }
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), System.ComponentModel.Browsable(false)]
		public int TableAdapterInstanceCount {
			get {
				int count = 0;
				if ((((this._login_DetailsTableAdapter) != null))) {
					count = (count + 1);
				}
				if ((((this._table_for_VBATableAdapter) != null))) {
					count = (count + 1);
				}
				return count;
			}
		}

		///<summary>
		///Update rows in top-down order.
		///</summary>
		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private int UpdateUpdatedRows(Login_DatabaseDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows)
		{
			int result = 0;
			if ((((this._table_for_VBATableAdapter) != null))) {
				global::System.Data.DataRow[] updatedRows = dataSet.Table_for_VBA.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
				updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
				if (((((updatedRows) != null)) && (0 < updatedRows.Length))) {
					result = (result + this._table_for_VBATableAdapter.Update(updatedRows));
					allChangedRows.AddRange(updatedRows);
				}
			}
			if ((((this._login_DetailsTableAdapter) != null))) {
				global::System.Data.DataRow[] updatedRows = dataSet.Login_Details.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
				updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
				if (((((updatedRows) != null)) && (0 < updatedRows.Length))) {
					result = (result + this._login_DetailsTableAdapter.Update(updatedRows));
					allChangedRows.AddRange(updatedRows);
				}
			}
			return result;
		}

		///<summary>
		///Insert rows in top-down order.
		///</summary>
		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private int UpdateInsertedRows(Login_DatabaseDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows)
		{
			int result = 0;
			if ((((this._table_for_VBATableAdapter) != null))) {
				global::System.Data.DataRow[] addedRows = dataSet.Table_for_VBA.Select(null, null, global::System.Data.DataViewRowState.Added);
				if (((((addedRows) != null)) && (0 < addedRows.Length))) {
					result = (result + this._table_for_VBATableAdapter.Update(addedRows));
					allAddedRows.AddRange(addedRows);
				}
			}
			if ((((this._login_DetailsTableAdapter) != null))) {
				global::System.Data.DataRow[] addedRows = dataSet.Login_Details.Select(null, null, global::System.Data.DataViewRowState.Added);
				if (((((addedRows) != null)) && (0 < addedRows.Length))) {
					result = (result + this._login_DetailsTableAdapter.Update(addedRows));
					allAddedRows.AddRange(addedRows);
				}
			}
			return result;
		}

		///<summary>
		///Delete rows in bottom-up order.
		///</summary>
		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private int UpdateDeletedRows(Login_DatabaseDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows)
		{
			int result = 0;
			if ((((this._login_DetailsTableAdapter) != null))) {
				global::System.Data.DataRow[] deletedRows = dataSet.Login_Details.Select(null, null, global::System.Data.DataViewRowState.Deleted);
				if (((((deletedRows) != null)) && (0 < deletedRows.Length))) {
					result = (result + this._login_DetailsTableAdapter.Update(deletedRows));
					allChangedRows.AddRange(deletedRows);
				}
			}
			if ((((this._table_for_VBATableAdapter) != null))) {
				global::System.Data.DataRow[] deletedRows = dataSet.Table_for_VBA.Select(null, null, global::System.Data.DataViewRowState.Deleted);
				if (((((deletedRows) != null)) && (0 < deletedRows.Length))) {
					result = (result + this._table_for_VBATableAdapter.Update(deletedRows));
					allChangedRows.AddRange(deletedRows);
				}
			}
			return result;
		}

		///<summary>
		///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
		///</summary>
		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows)
		{
			if (((updatedRows == null) || (updatedRows.Length < 1))) {
				return updatedRows;
			}
			if (((allAddedRows == null) || (allAddedRows.Count < 1))) {
				return updatedRows;
			}
			global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
			int i = 0;
			while ((i < updatedRows.Length)) {
				global::System.Data.DataRow row = updatedRows[i];
				if ((allAddedRows.Contains(row) == false)) {
					realUpdatedRows.Add(row);
				}
				i = (i + 1);
			}
			return realUpdatedRows.ToArray();
		}

		///<summary>
		///Update all changes to the dataset.
		///</summary>
		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public virtual int UpdateAll(Login_DatabaseDataSet dataSet)
		{
			if ((dataSet == null)) {
				throw new global::System.ArgumentNullException("dataSet");
			}
			if ((dataSet.HasChanges() == false)) {
				return 0;
			}
			if (((((this._login_DetailsTableAdapter) != null)) && (this.MatchTableAdapterConnection(this._login_DetailsTableAdapter.Connection) == false))) {
				throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
			}
			if (((((this._table_for_VBATableAdapter) != null)) && (this.MatchTableAdapterConnection(this._table_for_VBATableAdapter.Connection) == false))) {
				throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" + "tring.");
			}
			global::System.Data.IDbConnection workConnection = this.Connection;
			if ((workConnection == null)) {
				throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" + "ger TableAdapter property to a valid TableAdapter instance.");
			}
			bool workConnOpened = false;
			if (((workConnection.State & global::System.Data.ConnectionState.Broken) == global::System.Data.ConnectionState.Broken)) {
				workConnection.Close();
			}
			if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
				workConnection.Open();
				workConnOpened = true;
			}
			global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
			if ((workTransaction == null)) {
				throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" + "ctions or the current state is not allowing the transaction to begin.");
			}
			global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
			global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
			global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
			global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
			int result = 0;
			global::System.Data.DataSet backupDataSet = null;
			if (this.BackupDataSetBeforeUpdate) {
				backupDataSet = new global::System.Data.DataSet();
				backupDataSet.Merge(dataSet);
			}
			try {
				//---- Prepare for update -----------
				//
				if ((((this._login_DetailsTableAdapter) != null))) {
					revertConnections.Add(this._login_DetailsTableAdapter, this._login_DetailsTableAdapter.Connection);
					this._login_DetailsTableAdapter.Connection = (global::System.Data.OleDb.OleDbConnection)workConnection;
					this._login_DetailsTableAdapter.Transaction = (global::System.Data.OleDb.OleDbTransaction)workTransaction;
					if (this._login_DetailsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
						this._login_DetailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
						adaptersWithAcceptChangesDuringUpdate.Add(this._login_DetailsTableAdapter.Adapter);
					}
				}
				if ((((this._table_for_VBATableAdapter) != null))) {
					revertConnections.Add(this._table_for_VBATableAdapter, this._table_for_VBATableAdapter.Connection);
					this._table_for_VBATableAdapter.Connection = (global::System.Data.OleDb.OleDbConnection)workConnection;
					this._table_for_VBATableAdapter.Transaction = (global::System.Data.OleDb.OleDbTransaction)workTransaction;
					if (this._table_for_VBATableAdapter.Adapter.AcceptChangesDuringUpdate) {
						this._table_for_VBATableAdapter.Adapter.AcceptChangesDuringUpdate = false;
						adaptersWithAcceptChangesDuringUpdate.Add(this._table_for_VBATableAdapter.Adapter);
					}
				}
				//
				//---- Perform updates -----------
				//
				if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
					result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
					result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
				} else {
					result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
					result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
				}
				result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
				//
				//---- Commit updates -----------
				//
				workTransaction.Commit();
				if ((0 < allAddedRows.Count)) {
					global::System.Data.DataRow[] rows = new global::System.Data.DataRow[(allAddedRows.Count)];
					allAddedRows.CopyTo(rows);
					int i = 0;
					while ((i < rows.Length)) {
						global::System.Data.DataRow row = rows[i];
						row.AcceptChanges();
						i = (i + 1);
					}
				}
				if ((0 < allChangedRows.Count)) {
					global::System.Data.DataRow[] rows = new global::System.Data.DataRow[(allChangedRows.Count)];
					allChangedRows.CopyTo(rows);
					int i = 0;
					while ((i < rows.Length)) {
						global::System.Data.DataRow row = rows[i];
						row.AcceptChanges();
						i = (i + 1);
					}
				}
			} catch (System.Exception ex) {
				workTransaction.Rollback();
				//---- Restore the dataset -----------
				if (this.BackupDataSetBeforeUpdate) {
					global::System.Diagnostics.Debug.Assert((((backupDataSet) != null)));
					dataSet.Clear();
					dataSet.Merge(backupDataSet);
				} else {
					if ((0 < allAddedRows.Count)) {
						global::System.Data.DataRow[] rows = new global::System.Data.DataRow[(allAddedRows.Count)];
						allAddedRows.CopyTo(rows);
						int i = 0;
						while ((i < rows.Length)) {
							global::System.Data.DataRow row = rows[i];
							row.AcceptChanges();
							row.SetAdded();
							i = (i + 1);
						}
					}
				}
				throw ex;
			} finally {
				if (workConnOpened) {
					workConnection.Close();
				}
				if ((((this._login_DetailsTableAdapter) != null))) {
					this._login_DetailsTableAdapter.Connection = (global::System.Data.OleDb.OleDbConnection)revertConnections[this._login_DetailsTableAdapter];
					this._login_DetailsTableAdapter.Transaction = null;
				}
				if ((((this._table_for_VBATableAdapter) != null))) {
					this._table_for_VBATableAdapter.Connection = (global::System.Data.OleDb.OleDbConnection)revertConnections[this._table_for_VBATableAdapter];
					this._table_for_VBATableAdapter.Transaction = null;
				}
				if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
					global::System.Data.Common.DataAdapter[] adapters = new global::System.Data.Common.DataAdapter[(adaptersWithAcceptChangesDuringUpdate.Count)];
					adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
					int i = 0;
					while ((i < adapters.Length)) {
						global::System.Data.Common.DataAdapter adapter = adapters[i];
						adapter.AcceptChangesDuringUpdate = true;
						i = (i + 1);
					}
				}
			}
			return result;
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst)
		{
			global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
		}

		[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection)
		{
			if ((((this._connection) != null))) {
				return true;
			}
			if (((this.Connection == null) || (inputConnection == null))) {
				return true;
			}
			if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
				return true;
			}
			return false;
		}

		///<summary>
		///Update Order Option
		///</summary>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		public enum UpdateOrderOption
		{

			InsertUpdateDelete = 0,

			UpdateInsertDelete = 1
		}

		///<summary>
		///Used to sort self-referenced table's rows
		///</summary>
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
		private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow>
		{

			private global::System.Data.DataRelation _relation;

			private int _childFirst;

			[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
			internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) : base()
			{
				this._relation = relation;
				if (childFirst) {
					this._childFirst = -1;
				} else {
					this._childFirst = 1;
				}
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
			private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, ref int distance)
			{
				global::System.Diagnostics.Debug.Assert((((row) != null)));
				global::System.Data.DataRow root = row;
				distance = 0;

				global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
				traversedRows[row] = row;

				global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);

				while (((((parent) != null)) && (traversedRows.ContainsKey(parent) == false))) {
					distance = (distance + 1);
					root = parent;
					traversedRows[parent] = parent;
					parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);

				}

				if ((distance == 0)) {
					traversedRows.Clear();
					traversedRows[row] = row;
					parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);

					while (((((parent) != null)) && (traversedRows.ContainsKey(parent) == false))) {
						distance = (distance + 1);
						root = parent;
						traversedRows[parent] = parent;
						parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);

					}
				}

				return root;
			}

			[System.Diagnostics.DebuggerNonUserCodeAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
			public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2)
			{
				if (object.ReferenceEquals(row1, row2)) {
					return 0;
				}
				if ((row1 == null)) {
					return -1;
				}
				if ((row2 == null)) {
					return 1;
				}

				int distance1 = 0;
				global::System.Data.DataRow root1 = this.GetRoot(row1, ref distance1);

				int distance2 = 0;
				global::System.Data.DataRow root2 = this.GetRoot(row2, ref distance2);

				if (object.ReferenceEquals(root1, root2)) {
					return (this._childFirst * distance1.CompareTo(distance2));
				} else {
					global::System.Diagnostics.Debug.Assert(((((root1.Table) != null)) && (((root2.Table) != null))));
					if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
						return -1;
					} else {
						return 1;
					}
				}
			}
		}
	}
}


Logout Designer code

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
[Microsoft.VisualBasic.CompilerServices.DesignerGenerated()]
partial class Logout : System.Windows.Forms.Form
{

	//Form overrides dispose to clean up the component list.
	[System.Diagnostics.DebuggerNonUserCode()]
	protected override void Dispose(bool disposing)
	{
		try {
			if (disposing && components != null) {
				components.Dispose();
			}
		} finally {
			base.Dispose(disposing);
		}
	}

	//Required by the Windows Form Designer

	private System.ComponentModel.IContainer components;
	//NOTE: The following procedure is required by the Windows Form Designer
	//It can be modified using the Windows Form Designer.  
	//Do not modify it using the code editor.
	[System.Diagnostics.DebuggerStepThrough()]
	private void InitializeComponent()
	{
		this.Loglabel = new System.Windows.Forms.Label();
		this.No = new System.Windows.Forms.Button();
		this.information = new System.Windows.Forms.Label();
		this.Yes = new System.Windows.Forms.Button();
		this.SuspendLayout();
		//
		//Loglabel
		//
		this.Loglabel.AutoSize = true;
		this.Loglabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, Convert.ToByte(0));
		this.Loglabel.Location = new System.Drawing.Point(35, 23);
		this.Loglabel.Name = "Loglabel";
		this.Loglabel.Size = new System.Drawing.Size(211, 24);
		this.Loglabel.TabIndex = 0;
		this.Loglabel.Text = "Do you want to log out ?";
		//
		//No
		//
		this.No.Location = new System.Drawing.Point(182, 210);
		this.No.Name = "No";
		this.No.Size = new System.Drawing.Size(90, 25);
		this.No.TabIndex = 1;
		this.No.Text = "No";
		this.No.UseVisualStyleBackColor = true;
		//
		//information
		//
		this.information.AutoSize = true;
		this.information.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75f, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, Convert.ToByte(0));
		this.information.Location = new System.Drawing.Point(12, 68);
		this.information.Name = "information";
		this.information.Size = new System.Drawing.Size(274, 80);
		this.information.TabIndex = 2;
		this.information.Text = "If you want to logout of the Code Review Site, " + Strings.ChrW(13) + Strings.ChrW(10) + "please click yes." + Strings.ChrW(13) + Strings.ChrW(10) + Strings.ChrW(13) + Strings.ChrW(10) + " If you wan" + "t stay logged in the system," + Strings.ChrW(13) + Strings.ChrW(10) + "Then click no";
		//
		//Yes
		//
		this.Yes.Location = new System.Drawing.Point(15, 212);
		this.Yes.Name = "Yes";
		this.Yes.Size = new System.Drawing.Size(93, 23);
		this.Yes.TabIndex = 3;
		this.Yes.Text = "Yes";
		this.Yes.UseVisualStyleBackColor = true;
		//
		//Logout
		//
		this.AutoScaleDimensions = new System.Drawing.SizeF(6f, 13f);
		this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
		this.ClientSize = new System.Drawing.Size(284, 262);
		this.Controls.Add(this.Yes);
		this.Controls.Add(this.information);
		this.Controls.Add(this.No);
		this.Controls.Add(this.Loglabel);
		this.Name = "Logout";
		this.Text = "Logout";
		this.ResumeLayout(false);
		this.PerformLayout();

	}
	internal System.Windows.Forms.Label Loglabel;
	internal System.Windows.Forms.Button No;
	internal System.Windows.Forms.Label information;
	internal System.Windows.Forms.Button Yes;
	public Logout()
	{
		InitializeComponent();
	}
}
